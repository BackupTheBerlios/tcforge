# Process this file with autoconf to produce a configure script.

AC_INIT(transcode,0.6.13)
AC_CONFIG_AUX_DIR(autotools)
AC_CONFIG_SRCDIR(src/transcode.c)

dnl Detect the canonical host and target build environment
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(transcode,0.6.13)
AM_CONFIG_HEADER(config.h)
  
AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# dnl added 2002-04-26
AM_PROG_AS
AS=$CC
CCAS='$(CC)'
AC_SUBST(CCAS)
AC_PROG_CC
AC_SUBST(CCASFLAGS)
ASFLAGS="$CCASFLAGS"
AC_SUBST(ASFLAGS)

deflib="/lib"

is_osx=false
case "x${target_os}" in
  xdarwin*)
    is_osx=true
    CFLAGS="${CFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    CXXFLAGS="${CXXFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    OBJCFLAGS="${OBJCFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    #LDFLAGS="${LDFLAGS} -all_load"

    AC_DEFINE([SYSTEM_DARWIN], 1, [Define if this is Darwin / MacOSX OS])
    AC_DEFINE([BROKEN_PTHREADS], 1, [Define if you have weird pthreads])

    # Include Fink in compile and link if present
    if test -d /sw; then
      CPPFLAGS="${CPPFLAGS} -I/sw/include"
      LDFLAGS="${LDFLAGS} -L/sw/lib"
    fi
    ;;
esac

case "x${target_cpu}" in
  xx86_64*)
    is_amd64=true
    deflib="/lib64"
    AC_MSG_NOTICE([AMD64 CPU detected])
    ;;
esac


AM_CONDITIONAL([SYSTEM_DARWIN], test x"$is_osx" = x"true")
 
# Checks for libraries.
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_FUNCS([dlopen])
if test x$is_osx = xtrue; then
  AC_CHECK_FUNCS(dlsym_prepend_underscore,
    [CFLAGS="${CFLAGS} -Ddlsym=dlsym_prepend_underscore"],
    AC_MSG_WARN([Function 'dlsym_prepend_underscore' not found.])
    AC_MSG_WARN([Using function 'dlsym' directly instead.])
    AC_MSG_WARN([This can be a problem if the installed dlsym])
    AC_MSG_WARN([does not automatically prepend an underscore])
    AC_MSG_WARN([to symbols.]))
fi
AM_DISABLE_STATIC

# Checks for support lib
AC_MSG_CHECKING([whether support lib is needed])
AC_CHECK_FUNCS(getopt_long_only,[],
  [enable_supportlib="yes" 
    SUPPORT_OBJECTS="$SUPPORT_OBJECTS getopt.o getopt1.o"
    support_fct="$support_fct getopt"],
  [enable_supportlib="no"])
AC_MSG_RESULT($enable_supportlib)
if test X"$enable_supportlib" = Xyes; then
  SUPPORT_LIBS="\$(top_builddir)/libsupport/libsupport.a" 
  SUPPORT_INCLUDES="-I\$(top_srcdir)/libsupport"
  AC_SUBST(SUPPORT_OBJECTS)
  AC_SUBST(SUPPORT_LIBS)
  AC_SUBST(SUPPORT_INCLUDES)
  AC_MSG_RESULT(building support lib for $support_fct)
fi

if test X"$ac_cv_lib_dl_dlopen" = Xno; then
  case x${target_os} in
    xdarwin*)
      DLDARWINOBJECTS="$DLDARWINOBJECTS dlfcn_simple.o"
      DLDARWINLIB="\$(top_builddir)/libdldarwin/libdldarwin.a"
      DLDARWININCL="-I\$(top_srcdir)/libdldarwin/"
      AC_SUBST(DLDARWINOBJECTS)
      AC_SUBST(DLDARWINLIB)
      AC_SUBST(DLDARWININCL)
      ;;
  esac
fi

DLDARWINOBJECTS="$DLDARWINOBJECTS dummy.o"
AC_SUBST(DLDARWINOBJECTS)

if test X"$enable_shared" = Xyes; then
  DLLDFLAGS=-export-dynamic
  AC_SUBST(DLLDFLAGS)
fi


# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([errno.h fcntl.h sys/time.h unistd.h limits.h])
AC_CHECK_HEADERS([inttypes.h malloc.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_C_INLINE
AC_TYPE_SIZE_T 
AC_C_BIGENDIAN([big_endian=true
  AC_DEFINE([WORDS_BIGENDIAN], 1, [Define if your CPU is big endian])],
  big_endian=false)
AM_CONDITIONAL(BIG_ENDIAN,test x"$big_endian" = xtrue)
AC_TYPE_OFF_T
AC_C_ATTRIBUTE_ALIGNED

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_ALLOCA
AC_FUNC_VPRINTF
AC_FUNC_STAT
AC_FUNC_STRCOLL
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([strtol memalign ftruncate gettimeofday memset strerror])
AC_CHECK_FUNCS([strncasecmp stat floor atexit getpagesize memmove mkfifo])
AC_CHECK_FUNCS([vsscanf strptime])

AC_CHECK_LIB(m, lrint,
  AC_DEFINE([HAVE_LIBM_LRINT], 1,
    [Define if the lrint() function is in libm on your system]))

case "$host_os" in
  freebsd*|openbsd*|netbsd*|bsdi*|darwin*|rhapsody*)
     AC_DEFINE([SYS_BSD], 1, [Define if your system is modern BSD])
     ;;
  *)
     ;;
esac


dnl check for pthreads
dnl
case "$host" in
  *-*-freebsd*|*-*-openbsd*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib="-pthread"
    ;;
  *-*-bsdi*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib=""
    ;;
  *)
    pthread_cflags="-D_REENTRANT"
    pthread_lib="-lpthread"
    ;;
esac
save_LIBS="$LIBS"
LIBS="$LIBS $pthread_lib"
AC_MSG_CHECKING(for pthreads in $pthread_lib)
AC_TRY_LINK([
#include <pthread.h>
],[
   pthread_attr_t type;
   pthread_attr_init(&type);
],
  [use_pthreads=yes],
  [use_pthreads=no]);
AC_MSG_RESULT($use_pthreads)
LIBS="$save_LIBS"
PTHREAD_LIBS="$pthread_lib"
AC_SUBST(PTHREAD_LIBS)

dnl ********************************************************************
dnl Test for MMX support, if we find an IA32 platform then check to see
dnl if gcc and its tools can generate MMX instructions, also make sure
dnl nasm is present for the files that need that. 
dnl Both are checked for for the maximum flexablity.
dnl
dnl TODO: host = non intel, target = intel <blah> do the checks also?
dnl       remeber we are checking that the toolchain can generate the
dnl       code, not whether the host can execute the code, thats done
dnl       at run time with the exception of the SSE code.
dnl
dnl 
dnl have_asm_mmx=false  # we can't set this and then use AC_CACHE_CHECK()
have_asm_sse=false
have_asm_3dnow=false
have_asm_nasm=false
nasm=no
have_x86cpu=false
have_ppccpu=false
have_ppc_altivec=false

#don't enable mmx for amd64, won't work yet

dnl
dnl Altivec support
dnl

AC_ARG_ENABLE(altivec,
  AC_HELP_STRING([--enable-altivec],
    [enable Altivec code portions (yes)]),
  [case "${enableval}" in
    yes) use_altivec=yes ;;
    no)  use_altivec=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-altivec) ;;
  esac],
  [if test x"$have_ppc_altivec" = x"true" ; then
    use_altivec=yes;
  else
    use_altivec=no
  fi])

AM_CONDITIONAL(HAVE_PPC_ALTIVEC, test x"$use_altivec" = x"yes")
dnl if test x"$use_altivec" = x"no" ; then
dnl	AC_MSG_RESULT(*** All of Altivec dependent parts will be disabled ***)
dnl fi

use_mmx=no
use_sse=no

case x"$host_cpu" in 
  xi?86*|xk6*)
    AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
    have_x86cpu=true
    AC_MSG_RESULT(yes)
    # assume we should use them. test later if we _can_ use them
    use_mmx=yes
    use_sse=yes
  ;;
esac

dnl
dnl MMX support
dnl

AC_ARG_ENABLE(mmx,
  AC_HELP_STRING([--enable-mmx],
    [enable MMX code portions (yes)]),
  [case "${enableval}" in
    yes) use_mmx=yes ;;
    no)  use_mmx=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmx) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_mmx=yes
  else
    use_mmx=no
  fi])

AM_CONDITIONAL(HAVE_MMX, test x"$use_mmx" = x"yes")
if test x"$use_mmx" = x"no" ; then
  AC_MSG_RESULT(*** All of mmx dependent parts will be disabled ***)
fi

dnl
dnl SSE support
dnl
AC_ARG_ENABLE(sse,
  AC_HELP_STRING([--enable-sse],
    [enable SSE code portions (yes)]),
  [case "${enableval}" in
    yes) use_sse=yes ;;
    no)  use_sse=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-sse) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_sse=yes
  else
    use_sse=no
  fi])

AM_CONDITIONAL(HAVE_SSE, test x"$use_sse" = x"yes")
if test x"$use_sse" = x"no" ; then
  AC_MSG_RESULT(*** All of sse dependent parts will be disabled ***)
else
  AC_DEFINE([HAVE_SSE], 1, [Define if your CPU understands SSE instructions])
fi

can_compile_sse2=no

AC_CACHE_CHECK([if \$CC can handle SSE2 inline asm],
  [ac_cv_can_compile_sse2],
  [AC_TRY_COMPILE(,
    [void *p; asm volatile("movdqa    %%xmm2, %%xmm3"::"r"(p));],
    ac_cv_can_compile_sse2=true ac_cv_can_compile_sse2=no)
  ])
if test "x${ac_cv_can_compile_sse2}" != "xno"; then
  AC_DEFINE([CAN_COMPILE_SSE2], 1,
    [Define if your compiler can compile SSE2 inline asm])
  can_compile_sse2=true
fi


case x"$host_cpu" in
  xi?86*|xk6*)
    AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
    have_x86cpu=true
    AC_MSG_RESULT(yes)
    if test "$use_mmx" != "no"; then
      AC_DEFINE([HAVE_X86CPU], 1, [Define if you have and X86 based CPU])
      AC_DEFINE([ARCH_X86], 1, [Define if your machine is X86 based])
      AC_CACHE_CHECK([if \$CC groks MMX inline assembly],
        [have_asm_mmx],
        [AC_TRY_COMPILE(,[void *p;asm volatile("packuswb %%mm1,%%mm2"::"r"(p));],
          have_asm_mmx=yes, have_asm_mmx=no)])
      if test "x${have_asm_mmx}" != "xno"; then
        AC_DEFINE([HAVE_ASM_MMX], 1, [Define if your CPU understands ASM MMX instructions])
        AC_DEFINE([HAVE_MMX], 1, [Define if your CPU understands MMX instructions])
        have_asm_mmx=true
      fi # have_asm_mmx
      AC_MSG_CHECKING([for support for gcc-style register parameters on Intel])
      AC_TRY_COMPILE([],
        [extern void x(
          const unsigned char *src1,
          const unsigned char *src2,
          unsigned count,
          unsigned char *dst) __attribute((regparm(3)));],
        [AC_MSG_RESULT(yes)
          AC_PATH_PROG(NASM, nasm, no)
          case "${NASM}" in
            no)
              ;;
            *)
              dnl Check nasm version
              AC_MSG_CHECKING([for recent nasm version])
              nasm_patch_version=`${NASM} -r | cut -d '.' -f 3 | cut -d ' ' -f 1`
              if test "$nasm_patch_version" -lt "34"; then
                AC_MSG_RESULT([no])
              else
                AC_MSG_RESULT([yes])
                AC_DEFINE([HAVE_ASM_NASM], 1, [have nasm])
                NASMFLAGS="-felf"
                AC_SUBST(NASMFLAGS)
                have_asm_nasm=true
                nasm=yes
              fi
              ;;
          esac],
          [AC_MSG_RESULT(no)
            AC_MSG_WARN(*** MMX Optimizations disabled....)]);
    else  # use_mmx
      AC_MSG_RESULT(no)
    fi
    ;;
  xpowerpc*)
    AC_MSG_CHECKING([for PowerPC architecture])
    AC_MSG_RESULT(yes)
    have_ppccpu=true
    AC_DEFINE([ARCH_PPC], 1, [Define if your CPU is PPC])
    AC_CACHE_CHECK([if \$CC groks AltiVec inline assembly],
      [ac_cv_altivec_inline],
      [AC_TRY_COMPILE(,[asm volatile("vperm 0,1,2,3");],
        ac_cv_altivec_inline=yes,
        [save_CFLAGS="$CFLAGS"
          CFLAGS="$CFLAGS -Wa,-m7400"
          AC_TRY_COMPILE(,[asm volatile("vperm 0,1,2,3");],
            [ac_cv_altivec_inline="-Wa,-m7400"],
            ac_cv_altivec_inline=no)
          CFLAGS="$save_CFLAGS"
        ])
    ])
    if test "x${ac_cv_altivec_inline}" != "xno"; then
      AC_DEFINE([HAVE_PPC_ALTIVEC], 1,
        [Define if \$CC groks AltiVec inline assembly].)
      if test "x${ac_cv_altivec_inline}" != "xyes"; then
        use_altivec=yes
      fi
    fi

    have_c_altivec=no

    AC_CACHE_CHECK([if \$CC groks AltiVec C extensions],
      [ac_cv_c_altivec],
      [save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS -faltivec"
        # Darwin test
        AC_TRY_COMPILE(,[vec_mtvscr((vector unsigned int)(0));],
          ac_cv_c_altivec=-faltivec,
          [# Linux/PPC test
            CFLAGS="${save_CFLAGS} ${CFLAGS_idctaltivec} -fvec"
            AC_TRY_COMPILE(,[vec_mtvscr((vector unsigned int)(0));],
              [ac_cv_c_altivec="-fvec"],
              [ac_cv_c_altivec=no])])
        CFLAGS="$save_CFLAGS"])
    if test "x${ac_cv_c_altivec}" != "xno"; then
      AC_DEFINE([CAN_COMPILE_C_ALTIVEC], 1,
        [Define if your compiler groks C AltiVec extensions.])
      have_c_altivec=true
    fi

    AC_CACHE_CHECK([if linker needs -framework vecLib],
      [ac_cv_ld_altivec],
      [save_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS -framework vecLib"
        AC_TRY_LINK([],,ac_cv_ld_altivec=yes,ac_cv_ld_altivec=no)
        LDFLAGS="$save_LDFLAGS"])
    if test "x${ac_cv_ld_altivec}" != "xno"; then
      LDFLAGS="$LDFLAGS -framework vecLib"
    fi
    ;;
esac


dnl ************************************************************************
dnl Check that the GCC tool chain can generate 3DNow assmebly instructions
dnl
AC_MSG_CHECKING([for support of 3DNow in assembly code])
if test "$enable_3dnow_accel" != "no" ; then
  cat > conftest.S <<EOF
    .text

    pfmul %mm3, %mm4
EOF
  if $CC -c conftest.S ; then
    rm -f conftest.*
    AC_DEFINE([HAVE_ASM_3DNOW], 1,
      [Define if your tool chain can do 3dnow assembler])
    have_asm_3dnow=true
  else
    echo "configure: failed program was:" >&AC_FD_CC
    cat conftest.S >&AC_FD_CC
    rm -f conftest.*
  fi
fi
if test x$have_asm_3dnow = xtrue ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl ************************************************************************
dnl Check that the GCC tool chain can generate SSE assmebly instructions
dnl
if test "$enable_sse_accel" != "no"; then
  AC_CACHE_CHECK([if \$CC groks SSE inline assembly],
    [have_asm_sse],
    [AC_TRY_COMPILE(,[void *p;asm volatile("movntps %xmm0, 0"::"r"(p));],
      have_asm_sse=yes, have_asm_sse=no)])
  if test "x${have_asm_sse}" != "xno"; then
    AC_DEFINE([HAVE_ASM_SSE], 1,
      [Define if your CPU understands ASM SSE instructions])
    AC_DEFINE([HAVE_SSE], 1,
      [Define if your CPU understands SSE instructions])
    have_asm_sse=true
  fi
fi

dnl ********************************************************************* 
dnl This test only works on Linux machines with /proc filesystem support
dnl enabled or on *BSD (tested under FreeBSD) where CPU information is in
dnl /var/run/dmesg.boot (FIXME: other systems?). We have to check this 
dnl independantly as cmov is independant of MMX and 3DNow stuff.
dnl
have_cmov=false
if test x$have_x86cpu = xtrue ; then
 AC_MSG_CHECKING(for CMOV support)
 if test "$enable_cmov_extension" != "no" ; then
 case "$host" in
 *-*-freebsd*|*-*-openbsd*|*-*-netbsd*)
  cpu_features=`grep -l CMOV /var/run/dmesg.boot`
  if test X"$cpu_features" = X"/var/run/dmesg.boot" ; then
    have_cmov=true
    AC_DEFINE([HAVE_CMOV], 1, [Define if your CPU understands CMOV])
  fi ;;
 *)
  cpu_family=`grep "cpu family" /proc/cpuinfo | awk 'BEGIN { FS = ":"; } { printf "%d", $2 + 0;}'`
  if test "$cpu_family" -gt 5 ; then
    have_cmov=true
    AC_DEFINE([HAVE_CMOV], 1, [Define if your CPU understands CMOV])
  fi ;;
 esac
 fi
 AC_MSG_RESULT($have_cmov);
fi

dnl *********************************************************************
dnl For x86 machines only check which code model we should use
dnl 
if test x$have_x86cpu = xtrue ; then
AC_MSG_CHECKING(x86 sub-architecture settings)

  if test "$enable_cmov_extension" != "no" ; then
    arch=`uname -m`
  else
    arch=i586
  fi
  case `uname -m` in
  i786) ARCHFLAGS="-mcpu=i786 -march=$arch"
  ;;
  i686) ARCHFLAGS="-mcpu=i686 -march=$arch"
  ;;
  i586) ARCHFLAGS="-mcpu=i586 -march=$arch"
  ;;
  *) 
  ;;
  esac
AC_MSG_RESULT($ARCHFLAGS)
fi


dnl **********************************************************************
dnl All the conditional stuff for the Makefiles
dnl
AM_CONDITIONAL(HAVE_ASM_MMX, test x$have_asm_mmx = xtrue)
AM_CONDITIONAL(HAVE_ASM_SSE, test x$have_asm_sse = xtrue)
AM_CONDITIONAL(HAVE_ASM_3DNOW, test x$have_asm_3dnow = xtrue)
AM_CONDITIONAL(HAVE_ASM_NASM, test x$have_asm_nasm = xtrue)
AM_CONDITIONAL(HAVE_X86CPU, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(ARCH_X86, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(ARCH_PPC, test x$have_ppccpu = xtrue)
AM_CONDITIONAL(CAN_COMPILE_C_ALTIVEC, test "x${have_c_altivec}" = xtrue)

dnl Check for gcc2, which doesn't seem to handle asm templates
dnl
gcc2=no
if test x$GCC = xyes ; then
  gcc_ver="`$CC --version`"
  if test "x$gcc_ver" = x ; then
    gcc_ver="`$CC -v 2>&1 | sed -ne 's,.* version \(.\).*,\1,p'`"
  fi
  if test "x$gcc_ver" != x ; then
    if echo $gcc_ver | grep -q ^2 ; then
      gcc2=yes
    fi
  fi
fi
AM_CONDITIONAL(HAVE_GCC2, test x"$gcc2" = x"yes")

dnl GCC-specific flags
if test x"$GCC" = x"yes"; then
  OPT_CFLAGS=""
  if test x${USE_MAINTAINER_MODE} != xno; then
    OPT_CFLAGS="$OPT_CFLAGS -O2 $CFLAGS"
  else
    OPT_CFLAGS="$OPT_CFLAGS -O3 $CFLAGS"
  fi
  AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])

  if test x${USE_MAINTAINER_MODE} = xno; then
    OPT_CFLAGS="-fomit-frame-pointer $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
  fi
  dnl arch-specific flags
  case "$host_cpu" in
  i?86* | k?-*)
    AC_DEFINE([ARCH_X86], 1,[x86 architecture])
    case "$host" in
      *-*-freebsd*)
        arch="i`grep ^CPU /var/run/dmesg.boot | uniq | sed -e 's,.*\(.86\)-class.*,\1,'`"
        ;;
      *-*-openbsd*|*-*-netbsd*)
        arch="i`sysctl hw.model | sed -e 's,.*\(.86\)-class.*,\1,'`"
        ;;
      *)
        arch="$host_cpu"
        ;;
    esac
    case "$arch" in
      i386*) OPT_CFLAGS="$CFLAGS -mcpu=i386";;
      i486*) OPT_CFLAGS="$CFLAGS -mcpu=i486";;
      i586*) OPT_CFLAGS="$CFLAGS -mcpu=pentium";;
      i686*) OPT_CFLAGS="$CFLAGS -mcpu=pentiumpro";;
      k6*)   OPT_CFLAGS="$CFLAGS -mcpu=k6";;
    esac
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
    ;;
  sparc-*)
    OPT_CFLAGS="$CFLAGS -mcpu=ultrasparc -mvis"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
    ;;
  mips-sgi-irix6.*)	dnl do we need to be that specific ?
    OPT_CFLAGS="$CFLAGS -mabi=64"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
    ;;
  esac
else
  dnl non-gcc flags - we probably need exact configuration triplets here.
  case "$host_cpu" in
    mips-sgi-irix6.*)
      OPT_CFLAGS="$CFLAGS -64"
      AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
      ;;
    sparc-sun-solaris*)
      OPT_CFLAGS="$CFLAGS -xCC -fast -xO5"
      AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
      ;;
  esac
fi

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
dnl AC_CONFIG_SUBDIRS(libltdl)
dnl LTLIBOBJS=`echo "$AC_LIBOBJ" | sed 's,.o ,.lo ,g;s,.o$,.lo,'`
dnl AC_SUBST(LTLIBOBJS)

OPT_CFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 $CFLAGS"
AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
AC_SUBST(CFLAGS)

OPT_CFLAGS="-fno-unit-at-a-time $CFLAGS"
AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
AC_SUBST(CFLAGS)

OPT_CXXFLAGS="$CXXFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
AC_TRY_CXXFLAGS([$OPT_CXXFLAGS],[CXXFLAGS=$OPT_CXXFLAGS])
AC_SUBST(CXXFLAGS)

dnl
dnl fast integers
dnl
AC_MSG_CHECKING(if fast integers are available)
AC_TRY_COMPILE([
#include <inttypes.h>
], [
volatile uint_fast64_t i=0x01234567;
return 0
], [
AC_MSG_RESULT([yes])
], [
AC_DEFINE([EMULATE_FAST_INT], 1, [Define if your system lacks uint_fast64_t])
AC_MSG_RESULT([no])
])

dnl ---------------------------------------------------------------------
dnl X11 checks

dnl AC_MSG_CHECKING([whether X11 support is requested])
dnl Default is enabled X11

dnl AC_ARG_ENABLE(x,  AC_HELP_STRING([--enable-x], [build X11 dependent plugins (yes)]), 
dnl [
dnl if test x"${enableval}" = x"yes" ; then
dnl     AC_MSG_RESULT(yes)
dnl     USE_X11=yes
dnl else
dnl     AC_MSG_RESULT(no)
dnl     USE_X11=no
dnl fi], [
dnl USE_X11=yes
dnl AC_MSG_RESULT(yes)]
dnl )

dnl if test "${USE_X11}" = "yes"; then

AC_PATH_XTRA
if test x${no_x} = xyes; then
  AC_MSG_WARN(can not find X11)
  USE_X11=no
else
  AC_DEFINE([HAVE_X11], 1, [Have X11 support])
  USE_X11=yes
fi

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_includes)
AC_SUBST(x_libraries)

dnl fi

AM_CONDITIONAL(HAVE_X11, test x"${USE_X11}" = "xyes")

AC_CHECK_LIB(Xv, XvQueryExtension,
  [have_xv=yes
    AC_DEFINE([HAVE_LIBXV], 1,
      [Have libxv support])],
  [have_xv=no],
  [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
AM_CONDITIONAL(HAVE_LIBXV, test x"$have_xv" = "xyes")

AC_CHECK_HEADERS([X11/Xaw/Simple.h], 
  [have_xaw_simple=yes
    AC_DEFINE([HAVE_XAW_SIMPLE], 1,
      [Have the Xaw Simple.h file support])],
  [have_xaw_simple=no])
AM_CONDITIONAL(HAVE_XAW_SIMPLE, test x"$have_xaw_simple" = x"yes" )

AC_CHECK_LIB(Xpm, XpmFreeAttributes,
  [have_xpm=yes
    AC_DEFINE([HAVE_LIBXPM], 1,
      [Have libXpm support])],
  [have_xpm=no],
  [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
AM_CONDITIONAL(HAVE_LIBXPM, test x"$have_xpm" = "xyes")

dnl end X11 checks
dnl ---------------------------------------------------------------------

AC_CHECK_LIB(z, gzopen,
  [],
  [AC_MSG_ERROR([transcode depends on libz, but cannot links against libz])],
  [])

AC_CHECK_LIB(m, sin,
  [],
  [AC_MSG_ERROR([transcode depends on libm (>= 2.0), but cannot link against libm])],
  [-lc])

dnl
dnl libavcodec
dnl
TC_PATH_FFMPEG_LIBS(AC_DEFINE([HAVE_FFMPEG_LIBS], 1, [Have ffmpeg avcodec library support]))
AM_CONDITIONAL(HAVE_FFMPEG_LIBS, test x"$have_ffmpeg_libs" = "xyes")


dnl
dnl below are build options for transcode, most involving other packages
dnl


dnl
dnl static import frame buffer 
dnl
AC_MSG_CHECKING([for internal static framebuffer support])
AC_ARG_ENABLE(statbuffer,
  AC_HELP_STRING([--enable-statbuffer],
    [enable internal static framebuffer support (yes)]), 
  [case "${enableval}" in
    yes) ;;
    no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-statbuffer) ;;
  esac],
  [enable_statbuffer=yes])
AC_MSG_RESULT($enable_statbuffer)
if test x$enable_statbuffer = xyes ; then
  AC_DEFINE([STATBUFFER], 1, [Use the static buffers])	
fi

dnl
dnl experimental network streaming support
dnl
AC_MSG_CHECKING(for network streaming support)
AC_ARG_ENABLE(netstream,
  AC_HELP_STRING([--enable-netstream],
    [enable network streaming support (no)]),
  [case "${enableval}" in
    yes) ;;
    no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-netstream) ;;
  esac],
  [enable_netstream=no])
AC_MSG_RESULT($net)
if test x$enable_netstream = xyes ; then
  AC_DEFINE([NET_STREAM], 1, [Enable network functionality])	
fi
AM_CONDITIONAL(NET_STREAM, test x$enable_netstream = xyes)

dnl
dnl freetype2
dnl
TC_PATH_FT2([9.2.0], AC_DEFINE([HAVE_FREETYPE2], 1, [Define if you have the freetype2 lib]))
AM_CONDITIONAL(HAVE_FREETYPE2, test x$have_freetype2 = xyes)

dnl
dnl v4l
dnl
TC_CHECK_V4L(AC_DEFINE([HAVE_V4L], 1, [Have Video4linux headers]))
AM_CONDITIONAL(HAVE_V4L, test x$have_v4l = xyes)

dnl
dnl avifile support
dnl
TC_PATH_AVIFILE(AC_DEFINE([HAVE_AVIFILE], 1, [Have avifile support]))
AM_CONDITIONAL(HAVE_AVIFILE, test x"$have_avifile" = "xyes")

dnl
dnl lame support
dnl
TC_PATH_LAME(AC_DEFINE_UNQUOTED([HAVE_LAME], $lame_version, [Have lame lib support]))
AM_CONDITIONAL(HAVE_LAME, test x"$have_lame" = "xyes")
AM_CONDITIONAL(LAME_3_89, test x"$lame89" = "xyes")

dnl
dnl ogg support
dnl
TC_PATH_OGG(AC_DEFINE([HAVE_OGG], 1, [Have ogg support]))
AM_CONDITIONAL(HAVE_OGG, test x"$have_ogg" = "xyes")

dnl
dnl vorbis support
dnl
TC_PATH_VORBIS(AC_DEFINE([HAVE_VORBIS], 1, [Have vorbis support]))
AM_CONDITIONAL(HAVE_VORBIS, test x"$have_vorbis" = "xyes")

dnl
dnl theora support
dnl
TC_PATH_THEORA(AC_DEFINE([HAVE_THEORA], 1, [Have Theora support]))
AM_CONDITIONAL(HAVE_THEORA, test x"$have_theora" = "xyes")

dnl
dnl libdvdread support
dnl
TC_PATH_LIBDVDREAD(AC_DEFINE([HAVE_LIBDVDREAD], 1, [Have Libdvdread support]))
AM_CONDITIONAL(HAVE_LIBDVDREAD, test x$have_dvdread = xyes)

dnl
dnl xvid support
dnl
AC_MSG_CHECKING([for default xvid])
AC_ARG_WITH(default-xvid,
  AC_HELP_STRING([--with-default-xvid=xvid2/xvid3/xvid4],
    [Default xvid version (xvid4)]),
  [default_xvid=$withval],
  [default_xvid="xvid4"])
AC_MSG_RESULT($default_xvid)
XVID_DEFAULT="$default_xvid"
AC_SUBST(XVID_DEFAULT)

dnl
dnl MPlayer libpostproc
dnl
dnl AM_PATH_POSTPROC(AC_DEFINE([HAVE_LIBPOSTPROC], 1, [Have libpostproc support]))
dnl AM_CONDITIONAL(HAVE_LIBPOSTPROC, test x"$have_libpostproc" = "xyes")

dnl
dnl GM's lve
dnl
TC_PATH_LVE(AC_DEFINE([HAVE_LIBLVE], 1, [Have liblve support]))
AM_CONDITIONAL(HAVE_LIBLVE, test x"$have_liblve" = "xyes")

dnl
dnl PVM
dnl
TC_PATH_PVM3(AC_DEFINE([HAVE_PVM3], 1, [Have pvm3 support]))
AM_CONDITIONAL(HAVE_PVM3, test x"$have_pvm3" = "xyes")

dnl
dnl DV
dnl
TC_PATH_DV(AC_DEFINE([HAVE_DV], 1, [Have dv support]))
AM_CONDITIONAL(HAVE_DV, test x"$have_dv" = "xyes")

dnl
dnl libquicktime
dnl
TC_PATH_QT(AC_DEFINE([HAVE_QT], 1, [Have libquicktime support]))
AM_CONDITIONAL(HAVE_QT, test x"$have_libquicktime" = "xyes")

dnl
dnl LZO
dnl
TC_PATH_LZO(AC_DEFINE([HAVE_LZO], 1, [Have liblzo support]))
AM_CONDITIONAL(HAVE_LZO, test x"$have_lzo" = "xyes")

dnl dnl
dnl dnl LIBZ
dnl dnl
dnl AM_PATH_LIBZ(AC_DEFINE([HAVE_LIBZ], 1, [Have libz support]))
dnl AM_CONDITIONAL(HAVE_LIBZ, test x"$have_libz" = "xyes")

dnl
dnl A52
dnl
TC_PATH_A52(AC_DEFINE([HAVE_A52], 1, [Have liba52 support]))
AM_CONDITIONAL(HAVE_A52, test x"$have_a52" = "xyes")

dnl
dnl use liba52 as the default decoder 
dnl
if test x"$have_a52" = "xyes"; then
  AC_MSG_CHECKING(for liba52 as default decoder)
  AC_ARG_ENABLE(a52-default-decoder,
    AC_HELP_STRING([--enable-a52-default-decoder],
      [liba52 as default decoder (disabled)]),
    [case "${enableval}" in
      yes) ;;
      no)  ;;
      *) AC_MSG_ERROR(bad value ${enableval} for --enable-a52-default-decoder) ;;
    esac],
    [enable_a52_default_decoder=no])
  AC_MSG_RESULT($enable_a52_default_decoder)

  if test x"${enable_a52_default_decoder}" = x"yes"; then
    AC_DEFINE([USE_LIBA52_DECODER], 1,
      [Use the liba52 decoder as default])	
  fi
else
  AC_MSG_CHECKING(for use libac3 as default decoder)
  AC_MSG_RESULT(yes)
fi

dnl
dnl libmpeg3
dnl
TC_PATH_LIBMPEG3(AC_DEFINE([HAVE_LIBMPEG3], 1, [Have libmpeg3 support]))
AM_CONDITIONAL(HAVE_LIBMPEG3, test x"$have_libmpeg3" = "xyes")

dnl
dnl libxml2
dnl
TC_PATH_LIBXML2(AC_DEFINE([HAVE_LIBXML2], 1, [libxml2 support]))
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" = x"yes")

dnl
dnl ibp and lors
dnl
TC_PATH_IBP(AC_DEFINE([HAVE_IBP], 1, [ibp and lors support]))
AM_CONDITIONAL(HAVE_IBP, test x"$have_ibp" = x"yes")

dnl 
dnl mjpegtools (actually only YUV4MPEG)
dnl
TC_PATH_MJPEG(AC_DEFINE([HAVE_MJPEGTOOLS], 1, [mjpegtools support]))
AM_CONDITIONAL(HAVE_MJPEG, test x"$have_mjpegtools" = x"yes")

dnl
dnl SDL
dnl
TC_PATH_SDL(1.1.6, [AC_DEFINE([HAVE_SDL], 1, [Have libsdl support])])
AM_CONDITIONAL(HAVE_SDL, test x"$have_sdl" = "xyes")

dnl
dnl Divx4linux
dnl
AC_CHECK_HEADERS([decore.h], 
  [have_divx_decore=yes
    AC_DEFINE([HAVE_DIVX_DECORE], 1,
      [Have the Divx4linux decore.h header file])],
  [have_divx_decore=no])
AM_CONDITIONAL(HAVE_DIVX_DECORE, test x"$have_divx_decore" = x"yes" )

AC_CHECK_HEADERS([encore2.h], 
  [have_divx_encore2=yes
    AC_DEFINE([HAVE_DIVX_ENCORE2], 1,
      [Have the Divx4linux encore2.h header file])],
  [have_divx_encore2=no])
AM_CONDITIONAL(HAVE_DIVX_ENCORE2, test x"$have_divx_encore2" = x"yes" )

dnl
dnl GTK
dnl
TC_PATH_GTK(AC_DEFINE([HAVE_GTK], 1, [define if your system has gtk]))
AM_CONDITIONAL(HAVE_GTK, test x"$have_gtk" = "xyes")

dnl
dnl libfame
dnl
TC_PATH_LIBFAME([],[AC_DEFINE([HAVE_LIBFAME], 1, [Have libfame support])])
AM_CONDITIONAL(HAVE_LIBFAME, test x"$have_libfame" = "xyes")

dnl
dnl ImageMagick
dnl
TC_PATH_MAGICK(AC_DEFINE([HAVE_MAGICK], 1, [Have ImageMagick support]))
AM_CONDITIONAL(HAVE_MAGICK, test x"$have_magick" = "xyes")

dnl
dnl libjpeg
dnl
TC_PATH_LIBJPEG(AC_DEFINE([HAVE_LIBJPEG], 1, [Have libjpeg support]))
AM_CONDITIONAL(HAVE_LIBJPEG, test x"$have_libjpeg" = "xyes")

dnl
dnl ffmpeg binary
dnl
TC_PATH_FFMPEG(AC_DEFINE([HAVE_FFMPEG], 1, [Have ffmpeg binary support]))
AM_CONDITIONAL(HAVE_FFMPEG, test x"$have_ffmpeg" = "xyes")


dnl
dnl The following come with transcode
dnl


dnl
dnl libxio
dnl
AC_MSG_CHECKING([whether internal libxio support is requested])
AC_ARG_ENABLE(xio,
  AC_HELP_STRING([--enable-xio],
    [link to the xio library (no)]),
  [case "${enableval}" in
    yes) libxio=yes ;;
    no)  libxio=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-xio) ;;
  esac],
  [libxio=no])
AC_MSG_RESULT($libxio)
if test $libxio = yes; then
  if test x"$have_ibp" = x"yes" ; then
    XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
    XIO_LIBS="\$(top_builddir)/libxio/libxio.la $IBP_LIBS $LIBXML2_LIBS"
  else
    XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
    XIO_LIBS="\$(top_builddir)/libxio/libxio.la"
  fi
else 
  XIO_CFLAGS="-I\$(top_srcdir)/libxio"
  XIO_LIBS=""
fi
AC_SUBST(XIO_CFLAGS)
AC_SUBST(XIO_LIBS)

dnl
dnl avilib
dnl
AVILIB_CFLAGS="-I\$(top_srcdir)/avilib"
AVILIB_LIBS="\$(top_builddir)/avilib/libavi.la"
AC_SUBST(AVILIB_CFLAGS)
AC_SUBST(AVILIB_LIBS)

dnl
dnl libioaux
dnl
TCIOAUX_CFLAGS="-I\$(top_srcdir)/libioaux"
TCIOAUX_LIBS="\$(top_builddir)/libioaux/libtcioaux.la"
AC_SUBST(TCIOAUX_CFLAGS)
AC_SUBST(TCIOAUX_LIBS)

dnl
dnl libac3
dnl
AC3_CFLAGS="-I\$(top_srcdir)/libac3"
AC3_LIBS="\$(top_builddir)/libac3/libac3_tc.la"
AC_SUBST(AC3_CFLAGS)
AC_SUBST(AC3_LIBS)

dnl
dnl libmpeg2
dnl
MPEG2CVS_CFLAGS="-I\$(top_srcdir)/libmpeg2"
MPEG2CVS_LIBS="\$(top_builddir)/libmpeg2/libmpeg2cvs.la"
AC_SUBST(MPEG2CVS_CFLAGS)
AC_SUBST(MPEG2CVS_LIBS)

dnl
dnl libvo
dnl
LIBVO_CFLAGS="-I\$(top_srcdir)/libvo"
LIBVO_LIBS="\$(top_builddir)/libvo/libvout.la"
AC_SUBST(LIBVO_CFLAGS)
AC_SUBST(LIBVO_LIBS)

dnl
dnl aclib
dnl
ACLIB_CFLAGS="-I\$(top_srcdir)/aclib"
ACLIB_LIBS="\$(top_builddir)/aclib/libac.la"
AC_SUBST(ACLIB_CFLAGS)
AC_SUBST(ACLIB_LIBS)

dnl
dnl bbmpeg
dnl
BBMPEG_CFLAGS="-I\$(top_srcdir)/bbmpeg"
BBMPEG_LIBS="\$(top_builddir)/bbmpeg/libbbmpeg.la"
AC_SUBST(BBMPEG_CFLAGS)
AC_SUBST(BBMPEG_LIBS)

dnl
dnl libdvenc
dnl
LIBDVENC_CFLAGS="-I\$(top_srcdir)/libdvenc"
LIBDVENC_LIBS="\$(top_builddir)/libdvenc/libdvenc.la"
AC_SUBST(LIBDVENC_CFLAGS)
AC_SUBST(LIBDVENC_LIBS)


dnl
dnl warning flags; always add -Wall
dnl
if test x"$GCC" = x"yes"; then
    OPT_CFLAGS="-Wall $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
fi
AC_ARG_ENABLE([warnings-as-errors],
    AC_HELP_STRING([--enable-warnings-as-errors], [treat warnings as errors]))
if test x"$enable_warnings-as-errors" = x"yes" -a x"$GCC" = x"yes"; then
    dnl compiler warnings
    OPT_CFLAGS="-Werror $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
fi
AC_SUBST(CFLAGS)

dnl import/export module path
dnl
MOD_PATH="\${prefix}/lib/transcode"
AC_ARG_WITH(mod-path,
  AC_HELP_STRING([--with-mod-path],
    [where export/import modules are installed (${prefix}/lib/transcode)]),
  MOD_PATH=$withval)
AC_SUBST(MOD_PATH)

transcode_0_6=yes
AC_DEFINE([TRANSCODE_0_6], 1, [Define for transcode_0_6])
AM_CONDITIONAL(TRANSCODE_0_6, test x"$transcode_0_6" = x"yes")

X_CFLAGS=`echo $X_CFLAGS | sed -e 's/  */ /g'`
X_PRE_LIBS=`echo $X_PRE_LIBS | sed -e 's/  */ /g'`
X_LIBS=`echo $X_LIBS | sed -e 's/  */ /g'`
X_EXTRA_LIBS=`echo $X_EXTRA_LIBS | sed -e 's/  */ /g'`

CC=`echo $CC | sed -e 's/  */ /g'`
CFLAGS=`echo $CFLAGS | sed -e 's/  */ /g'`
CPPFLAGS=`echo $CPPFLAGS | sed -e 's/  */ /g'`
CXXFLAGS=`echo $CXXFLAGS | sed -e 's/  */ /g'`
LDFLAGS=`echo $LDFLAGS | sed -e 's/  */ /g'`

AC_SUBST(CFLAGS)
AC_SUBST(CC)
AC_SUBST(LDFLAGS)

dnl			ffmpeg/Makefile
dnl			ffmpeg/libavcodec/Makefile
dnl			ffmpeg/libavcodec/i386/Makefile
dnl			ffmpeg/libavcodec/ppc/Makefile

AC_OUTPUT([
           Makefile
	   libxio/Makefile
           src/Makefile
           avilib/Makefile
	   libioaux/Makefile
           libac3/Makefile
           libvo/Makefile
           libmpeg2/Makefile
           libmp3lame/Makefile
           libdvenc/Makefile
           bbmpeg/Makefile
           bbmpeg/tcmplex/Makefile
           export/Makefile
           import/Makefile
           import/nuv/Makefile
           import/af6/Makefile
           import/net/Makefile
           import/v4l/Makefile
           import/lve/Makefile
           import/yuv/Makefile
           filter/Makefile
           filter/pp/Makefile
           filter/subtitler/Makefile
           filter/preview/Makefile
           filter/divxkey/Makefile
           filter/extsub/Makefile
           filter/resample/Makefile
           filter/test/Makefile
           filter/ivtc/Makefile
           filter/yuvdenoise/Makefile
           filter/tomsmocomp/Makefile
           pvm3/Makefile
           docs/Makefile
           docs/html/Makefile
           docs/man/Makefile
           contrib/Makefile
	   contrib/pnmpvn/Makefile
           tools/Makefile
           aclib/Makefile
           libsupport/Makefile
           libdldarwin/Makefile
           transcode.spec
          ])

if test x${lame_version} = x1; then
  lame_print="static"
else
  lame_print=$lame_version
fi

AC_MSG_RESULT([
----------------------------------------------------------
Summary for transcode $VERSION features:
*-*-*-*-*-*-* Core *-*-*-*-*-*-*
static AV-frame buffering                        $enable_statbuffer
support for network (sockets) streams            $enable_netstream
DVD navigation support with libdvdread           $have_dvdread
link against local lame library (>=3.89) | ver   $lame89 | $lame_print
experimental xio | support for IBP storage       $libxio | $have_ibp
pvm3 support                                     $have_pvm3
ffmpeg libs headers                              $with_ffmpeg_libs_i
ffmpeg libs libraries                            $with_ffmpeg_libs_l
ffmpeg libs build                                $FFMPEG_LIBS_BUILD
ffmpeg libs version                              $FFMPEG_LIBS_VERSION
ffmpeg libs statically linked                    $enable_ffmpeg_libs_static
*-*-*-*-*-*-* Codec *-*-*-*-*-*-*
nasm dependent modules                           $nasm
mjpegtools dependent modules                     $have_mjpegtools
libdv dependent modules			         $have_dv
Ogg support | Vorbis support | Theora support    $have_ogg | $have_vorbis | $have_theora
Default xvid export module                       $XVID_DEFAULT
liba52 audio plugin (>=0.7.3) | default decoder  $have_a52 | $enable_a52_default_decoder
avifile API support                              $have_avifile
ImageMagick dependent modules (>=5.4.3)          $have_magick
libjpeg dependent modules | mmx accel            $have_libjpeg | $have_libjpegmmx
liblzo dependent modules                         $have_lzo
libxml2 dependent modules                        $have_libxml2
v4l dependent modules                            $have_v4l
experimental lve support                         $have_liblve
libmpeg3 dependent modules                       $have_libmpeg3
libfame video encoding plugin                    $have_libfame
libquicktime dependent modules                   $have_libquicktime
FFmpeg binary module                             $have_ffmpeg
SDL support                                      $have_sdl
GTK support                                      $have_gtk
*-*-*-*-*-*-* Filter *-*-*-*-*-*-*
X11 dependent filter plugins                     $USE_X11
freetype2 dependent filter (text, subtitler)     $have_freetype2
----------------------------------------------------------
])

if test x"$have_x86cpu" = x"true"; then
  case "${NASM}" in
  no)
     AC_MSG_RESULT([
It is recommended that you install/upgrade your nasm.
You need at least 0.9.34 from http://nasm.sf.net])
  ;;
  esac
fi
