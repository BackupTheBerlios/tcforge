# Process this file with autoconf to produce a configure script.

AC_INIT(transcode,0.6.13)
AC_CONFIG_AUX_DIR(autotools)
AC_CONFIG_SRCDIR(src/transcode.c)

dnl Detect the canonical host and target build environment
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(transcode,0.6.13)
AM_CONFIG_HEADER(config.h)
  
AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# dnl added 2002-04-26
AM_PROG_AS
AS=$CC
CCAS='$(CC)'
AC_SUBST(CCAS)
AC_PROG_CC
AC_SUBST(CCASFLAGS)
ASFLAGS="$CCASFLAGS"
AC_SUBST(ASFLAGS)

deflib="/lib"

is_osx=false
case "x${target_os}" in
   xdarwin*)
    is_osx=true
    CFLAGS_save="${CFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"; CFLAGS="${CFLAGS_save}"
    CXXFLAGS_save="${CXXFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"; CXXFLAGS="${CXXFLAGS_save}"
    OBJCFLAGS_save="${OBJCFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"; OBJCFLAGS="${OBJCFLAGS_save}"
    #LDFLAGS_save="${LDFLAGS_save} -all_load"; LDFLAGS="${LDFLAGS_save}"

    AC_DEFINE([SYSTEM_DARWIN], 1, [Define if this is Darwin / MacOSX OS])
    AC_DEFINE([BROKEN_PTHREADS], 1, [Define if you have weird pthreads])

    # Include Fink in compile and link if present
    if test -d /sw; then
        CFLAGS_save="${CFLAGS} -I/sw/include"; CFLAGS="${CFLAGS_save}"
    	CXXFLAGS_save="${CXXFLAGS} -I/sw/include"; CXXFLAGS="${CXXFLAGS_save}"
	OBJCFLAGS_save="${OBJCFLAGS} -I/sw/include"; OBJCFLAGS="${OBJCFLAGS_save}"
	LDFLAGS_save="${LDFLAGS_save} -L/sw/lib"; LDFLAGS="${LDFLAGS_save}"
    fi
    ;;
esac

case "x${target_cpu}" in
  xx86_64*)
   is_amd64=true
   deflib="/lib64"
	AC_MSG_NOTICE([AMD64 CPU detected])
  ;;
esac


AM_CONDITIONAL([SYSTEM_DARWIN], test x"$is_osx" = x"true")
 
# Checks for libraries.
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_FUNCS([dlopen])
if test x$is_osx = xtrue; then
   AC_CHECK_FUNCS(dlsym_prepend_underscore,
	[CFLAGS_save="${CFLAGS} -Ddlsym=dlsym_prepend_underscore"
	 CFLAGS="${CFLAGS_save}"],
	AC_MSG_WARN([Function 'dlsym_prepend_underscore' not found.])
	AC_MSG_WARN([Using function 'dlsym' directly instead.])
	AC_MSG_WARN([This can be a problem if the installed dlsym])
	AC_MSG_WARN([does not automatically prepend an underscore])
	AC_MSG_WARN([to symbols.]))
fi
AM_DISABLE_STATIC

# Checks for support lib
enable_supportlib="no"
AC_CHECK_FUNCS(getopt_long_only,[],[enable_supportlib="yes" 
   SUPPORTOBJECTS="$SUPPORTOBJECTS getopt.o getopt1.o" support_fct="$support_fct getopt"])
AC_MSG_RESULT(checking whether support lib is needed... $enable_supportlib)
if test X"$enable_supportlib" = Xyes; then
   SUPPORTLIB="../libsupport/libsupport.a" 
   SUPPORTINCL="-I../libsupport/"
   AC_SUBST(SUPPORTOBJECTS)
   AC_SUBST(SUPPORTLIB)
   AC_SUBST(SUPPORTINCL)
   AC_MSG_RESULT(  building support lib for $support_fct)
fi

if test X"$ac_cv_lib_dl_dlopen" = Xno; then
   case x${target_os} in
      xdarwin*)
      DLDARWINOBJECTS="$DLDARWINOBJECTS dlfcn_simple.o"
      DLDARWINLIB="../libdldarwin/libdldarwin.a" 
      DLDARWININCL="-I../libdldarwin/"
      AC_SUBST(DLDARWINOBJECTS)
      AC_SUBST(DLDARWINLIB)
      AC_SUBST(DLDARWININCL)
      ;;
   esac
fi

DLDARWINOBJECTS="$DLDARWINOBJECTS dummy.o"
AC_SUBST(DLDARWINOBJECTS)

if test X"$enable_shared" = Xyes; then
  DLLDFLAGS=-export-dynamic
  AC_SUBST(DLLDFLAGS)
fi


# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([errno.h fcntl.h sys/time.h unistd.h limits.h inttypes.h malloc.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_C_INLINE
AC_TYPE_SIZE_T 
AC_C_BIGENDIAN([big_endian=true;AC_DEFINE([WORDS_BIGENDIAN], 1, [Define if your CPU is big endian])],big_endian=false)
AM_CONDITIONAL(BIG_ENDIAN,test x"$big_endian" = xtrue)
AC_TYPE_OFF_T
AC_C_ATTRIBUTE_ALIGNED

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_ALLOCA
AC_FUNC_VPRINTF
AC_FUNC_STAT
AC_FUNC_STRCOLL
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([strtol memalign ftruncate gettimeofday memset strerror strncasecmp stat floor atexit getpagesize memmove mkfifo vsscanf strptime])
AC_CHECK_LIB(m, lrint, AC_DEFINE(HAVE_LIBM_LRINT, 1, [Define if the lrint() function is in libm on your system]))

case "$host_os" in
  freebsd*|openbsd*|netbsd*|bsdi*|darwin*|rhapsody*)
     AC_DEFINE([SYS_BSD], 1, [Define if your system is modern BSD])
     ;;
  *)
     ;;
esac


dnl for libavcodec
AC_CHECK_LIB(m, lrintf, AC_DEFINE([HAVE_LRINTF], 1, [define if you have the lrintf function]))

dnl Replace `main' with a function in pthread libs:
 case "$host" in
   *-*-freebsd*|*-*-openbsd*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib="-pthread"
    ;;
   *-*-bsdi*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib=""
    ;;
   *)
    pthread_cflags="-D_REENTRANT"
    pthread_lib="-lpthread"
    ;;
 esac
 LIBS="$pthread_lib $LIBS"
 AVILIBDEPLIB="$LIBS"
 AC_MSG_CHECKING(for pthreads)
 use_pthreads=no
 AC_TRY_LINK([
   #include <pthread.h>
 ],[
   pthread_attr_t type;
   pthread_attr_init(&type);
 ],[
   use_pthreads=yes
 ]);
 AC_MSG_RESULT($pthread_lib $use_pthreads)

AM_PATH_GLIB(0.99.7)

dnl ********************************************************************
dnl Test for MMX support, if we find an IA32 platform then check to see
dnl if gcc and its tools can generate MMX instructions, also make sure
dnl nasm is present for the files that need that. 
dnl Both are checked for for the maximum flexablity.
dnl
dnl TODO: host = non intel, target = intel <blah> do the checks also?
dnl       remeber we are checking that the toolchain can generate the
dnl       code, not whether the host can execute the code, thats done
dnl       at run time with the exception of the SSE code.
dnl
dnl 
dnl have_asm_mmx=false  # we can't set this and then use AC_CACHE_CHECK()
have_asm_sse=false
have_asm_3dnow=false
have_asm_nasm=false
nasm=no
have_x86cpu=false
have_ppccpu=false
have_ppc_altivec=false

#don't enable mmx for amd64, won't work yet

dnl
dnl Altivec support
dnl

AC_ARG_ENABLE(altivec, AC_HELP_STRING([--enable-altivec], [enable Altivec code portions (yes)]),[case "${enableval}" in
  yes) use_altivec=yes ;;
  no)  use_altivec=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-altivec) ;;
esac], [if test x"$have_ppc_altivec" = x"true"; then use_altivec=yes; else use_altivec=no;fi])

AM_CONDITIONAL(HAVE_PPC_ALTIVEC, test x"$use_altivec" = x"yes")
dnl if test x"$use_altivec" = x"no" ; then
dnl	AC_MSG_RESULT(*** All of Altivec dependent parts will be disabled ***)
dnl fi

use_mmx=no
use_sse=no

case x"$host_cpu" in 
  xi?86*|xk6*)
  AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
  have_x86cpu=true
  AC_MSG_RESULT(yes)
  # assume we should use them. test later if we _can_ use them
  use_mmx=yes
  use_sse=yes
  ;;
esac

dnl
dnl MMX support
dnl

AC_ARG_ENABLE(mmx, AC_HELP_STRING([--enable-mmx], [enable MMX code portions (yes)]),[case "${enableval}" in
  yes) use_mmx=yes ;;
  no)  use_mmx=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmx) ;;
esac], [if test x"$have_x86cpu" = x"true"; then use_mmx=yes; else use_mmx=no;fi])

AM_CONDITIONAL(HAVE_MMX, test x"$use_mmx" = x"yes")
if test x"$use_mmx" = x"no" ; then
	AC_MSG_RESULT(*** All of mmx dependent parts will be disabled ***)
fi

dnl
dnl SSE support
dnl
AC_ARG_ENABLE(sse, AC_HELP_STRING([--enable-sse], [enable SSE code portions (yes)]),[case "${enableval}" in
  yes) use_sse=yes ;;
  no)  use_sse=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-sse) ;;
esac], [if test x"$have_x86cpu" = x"true"; then use_sse=yes; else use_sse=no;fi])

AM_CONDITIONAL(HAVE_SSE, test x"$use_sse" = x"yes")
if test x"$use_sse" = x"no" ; then
	AC_MSG_RESULT(*** All of sse dependent parts will be disabled ***)
else
AC_DEFINE([HAVE_SSE], 1, [Define if your CPU understands SSE instructions])
fi

can_compile_sse2=no

AC_CACHE_CHECK([if \$CC can handle SSE2 inline asm],
    [ac_cv_can_compile_sse2],
    [ AC_TRY_COMPILE(,
      [void *p; asm volatile("movdqa    %%xmm2, %%xmm3"::"r"(p));],
      ac_cv_can_compile_sse2=true, ac_cv_can_compile_sse2=no)])
if test "x${ac_cv_can_compile_sse2}" != "xno"; then
  AC_DEFINE(CAN_COMPILE_SSE2, 1, Define if your compiler can compile SSE2 inline asm)
  can_compile_sse2=true
fi



case x"$host_cpu" in 
  xi?86*|xk6*)
  AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
  have_x86cpu=true
  AC_MSG_RESULT(yes)
if test "$use_mmx" != "no"; then
   AC_DEFINE([HAVE_X86CPU], 1, [Define if you have and X86 based CPU])
   AC_DEFINE([ARCH_X86], 1, [Define if your machine is X86 based])
   AC_CACHE_CHECK([if \$CC groks MMX inline assembly],
		  [have_asm_mmx],
		  [CFLAGS="${CFLAGS_save}"
		   AC_TRY_COMPILE(,[void *p;asm volatile("packuswb %%mm1,%%mm2"::"r"(p));],
		   have_asm_mmx=yes, have_asm_mmx=no)])
   if test "x${have_asm_mmx}" != "xno"; then
      AC_DEFINE([HAVE_ASM_MMX], 1, [Define if your CPU understands ASM MMX instructions])
      AC_DEFINE([HAVE_MMX], 1, [Define if your CPU understands MMX instructions])
      have_asm_mmx=true
      AC_MSG_RESULT([yes])
   else
      AC_MSG_RESULT([no])
   fi # have_asm_mmx

   AC_MSG_CHECKING([for support for gcc-style register parameters on Intel])
   AC_TRY_COMPILE([],
    [extern void x(
     const unsigned char *src1,
     const unsigned char *src2,
     unsigned count,
     unsigned char *dst) __attribute((regparm(3)));],
   [AC_MSG_RESULT(yes)

    AC_PATH_PROG(NASM, nasm, no)
    case "${NASM}" in
no)
   ;;
*)
     dnl Check nasm version
     AC_MSG_CHECKING([for recent nasm version]) 
     nasm_patch_version=`${NASM} -r | cut -d '.' -f 3 | cut -d ' ' -f 1`
     if test "$nasm_patch_version" -lt "34"; then
       AC_MSG_RESULT([no])
     else
       AC_MSG_RESULT([yes])
       AC_DEFINE(HAVE_ASM_NASM, 1, have nasm)
       NASMFLAGS="-felf"
       AC_SUBST(NASMFLAGS)
       have_asm_nasm=true
       nasm=yes
     fi
   ;;
esac
  ],
  [AC_MSG_RESULT(no)
   AC_MSG_WARN(*** MMX Optimizations disabled....)]);
 else
   AC_MSG_RESULT(no) ;
 fi
  ;;
xpowerpc*)
   AC_MSG_CHECKING([for PowerPC architecture])
   AC_MSG_RESULT(yes)
   have_ppccpu=true

   AC_DEFINE(ARCH_PPC, 1, [Define if your CPU is PPC])

AC_CACHE_CHECK([if \$CC groks AltiVec inline assembly],
    [ac_cv_altivec_inline],
    [CFLAGS="${CFLAGS_save}"
     AC_TRY_COMPILE(,[asm volatile("vperm 0,1,2,3");],
         ac_cv_altivec_inline=yes,
         [CFLAGS="${CFLAGS_save} -Wa,-m7400"
          AC_TRY_COMPILE(,[asm volatile("vperm 0,1,2,3");],
            [ac_cv_altivec_inline="-Wa,-m7400"],
            ac_cv_altivec_inline=no)
         ])])

if test "x${ac_cv_altivec_inline}" != "xno"; then
  AC_DEFINE(HAVE_PPC_ALTIVEC, 1, Define if \$CC groks AltiVec inline assembly.)
  if test "x${ac_cv_altivec_inline}" != "xyes"; then
     use_altivec=yes
  fi
fi

have_c_altivec=no

AC_CACHE_CHECK([if \$CC groks AltiVec C extensions],
    [ac_cv_c_altivec],
    [CFLAGS="${CFLAGS_save} -faltivec"
     # Darwin test
     AC_TRY_COMPILE(,[vec_mtvscr((vector unsigned int)(0));],
        ac_cv_c_altivec=-faltivec, [
        # Linux/PPC test
        CFLAGS="${CFLAGS_save} ${CFLAGS_idctaltivec} -fvec"
        AC_TRY_COMPILE(,[vec_mtvscr((vector unsigned int)(0));],
            [ac_cv_c_altivec="-fvec"], ac_cv_c_altivec=no)
        ])
     CFLAGS="${CFLAGS_save}"])
if test "x${ac_cv_c_altivec}" != "xno"; then
  AC_DEFINE(CAN_COMPILE_C_ALTIVEC, 1, Define if your compiler groks C AltiVec extensions.)
  have_c_altivec=true
fi

AC_CACHE_CHECK([if linker needs -framework vecLib],
    [ac_cv_ld_altivec],
    [LDFLAGS_save="${LDFLAGS}"
     LDFLAGS="${LDFLAGS} -framework vecLib"
     AC_TRY_LINK([],,ac_cv_ld_altivec=yes,ac_cv_ld_altivec=no)
     LDFLAGS="${LDFLAGS_save}"
    ])
if test "x${ac_cv_ld_altivec}" != "xno"; then
  LDFLAGS_save="${LDFLAGS_save} -framework vecLib"; LDFLAGS="${LDFLAGS_save}"
fi
esac
  
dnl ************************************************************************
dnl Check that the GCC tool chain can generate 3DNow assmebly instructions
dnl
AC_MSG_CHECKING([for support of 3DNow in assembly code])
if test "$enable_3dnow_accel" != "no" ; then
  cat > conftest.S <<EOF
    .text

    pfmul %mm3, %mm4
EOF
 if $CC -c conftest.S ; then
   rm -f conftest.*
   AC_DEFINE([HAVE_ASM_3DNOW], 1, [Define if your tool chain can do 3dnow assembler])
   have_asm_3dnow=true
 else
   echo "configure: failed program was:" >&AC_FD_CC
   cat conftest.S >&AC_FD_CC
   rm -f conftest.*
 fi
fi
if test x$have_asm_3dnow = xtrue ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl ************************************************************************
dnl Check that the GCC tool chain can generate SSE assmebly instructions
dnl
if test "$enable_sse_accel" != "no"; then
   AC_CACHE_CHECK([if \$CC groks SSE inline assembly],
		  [have_asm_sse],
		  [CFLAGS="${CFLAGS_save}"
		   AC_TRY_COMPILE(,[void *p;asm volatile("movntps %xmm0, 0"::"r"(p));],
		   have_asm_sse=yes, have_asm_sse=no)])
   if test "x${have_asm_sse}" != "xno"; then
      AC_DEFINE([HAVE_ASM_SSE], 1, [Define if your CPU understands ASM SSE instructions])
      AC_DEFINE([HAVE_SSE], 1, [Define if your CPU understands SSE instructions])
      have_asm_sse=true
      AC_MSG_RESULT([yes])
   else
      AC_MSG_RESULT([no])
   fi
fi

dnl ********************************************************************* 
dnl This test only works on Linux machines with /proc filesystem support
dnl enabled or on *BSD (tested under FreeBSD) where CPU information is in
dnl /var/run/dmesg.boot (FIXME: other systems?). We have to check this 
dnl independantly as cmov is independant of MMX and 3DNow stuff.
dnl
have_cmov=false
if test x$have_x86cpu = xtrue ; then
 AC_MSG_CHECKING(for CMOV support)
 if test "$enable_cmov_extension" != "no" ; then
 case "$host" in
 *-*-freebsd*|*-*-openbsd*)
  cpu_features=`grep -l CMOV /var/run/dmesg.boot`
  if test X"$cpu_features" = X"/var/run/dmesg.boot" ; then
    have_cmov=true
    AC_DEFINE([HAVE_CMOV], 1, [Define if your CPU understands CMOV])
  fi ;;
 *)
  cpu_family=`grep "cpu family" /proc/cpuinfo | awk 'BEGIN { FS = ":"; } { printf "%d", $2 + 0;}'`
  if test "$cpu_family" -gt 5 ; then
    have_cmov=true
    AC_DEFINE([HAVE_CMOV], 1, [Define if your CPU understands CMOV])
  fi ;;
 esac
 fi
 AC_MSG_RESULT($have_cmov);
fi

dnl *********************************************************************
dnl For x86 machines only check which code model we should use
dnl 
if test x$have_x86cpu = xtrue ; then
AC_MSG_CHECKING(x86 sub-architecture settings)

  if test "$enable_cmov_extension" != "no" ; then
    arch=`uname -m`
  else
    arch=i586
  fi
  case `uname -m` in
  i786) ARCHFLAGS="-mcpu=i786 -march=$arch"
  ;;
  i686) ARCHFLAGS="-mcpu=i686 -march=$arch"
  ;;
  i586) ARCHFLAGS="-mcpu=i586 -march=$arch"
  ;;
  *) 
  ;;
  esac
AC_MSG_RESULT($ARCHFLAGS)
fi


dnl **********************************************************************
dnl All the conditional stuff for the Makefiles
dnl
AM_CONDITIONAL(HAVE_ASM_MMX, test x$have_asm_mmx = xtrue)
AM_CONDITIONAL(HAVE_ASM_SSE, test x$have_asm_sse = xtrue)
AM_CONDITIONAL(HAVE_ASM_3DNOW, test x$have_asm_3dnow = xtrue)
AM_CONDITIONAL(HAVE_ASM_NASM, test x$have_asm_nasm = xtrue)
AM_CONDITIONAL(HAVE_X86CPU, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(ARCH_X86, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(ARCH_PPC, test x$have_ppccpu = xtrue)
AM_CONDITIONAL(CAN_COMPILE_C_ALTIVEC, test "x${have_c_altivec}" = xtrue)


dnl GCC-specific flags
if test x"$GCC" = x"yes"; then

    dnl -Wall -Werror moved to the end to not disturb the configure script


    dnl -O3
    dnl changequote(<<,>>)
    dnl OPT_CFLAGS=`echo "$CFLAGS"|sed "s/-O[0-9]*//g;"`
    dnl changequote([,])
    OPT_CFLAGS=""
    if test x${USE_MAINTAINER_MODE} != xno; then
       OPT_CFLAGS="$OPT_CFLAGS -O2 $CFLAGS"
    else
       OPT_CFLAGS="$OPT_CFLAGS -O3 $CFLAGS"
    fi
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])

    dnl -fomit-frame-pointer
    if test x${USE_MAINTAINER_MODE} = xno; then
       OPT_CFLAGS="-fomit-frame-pointer $CFLAGS"
       AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
    fi


    dnl arch-specific flags
    case "$host_cpu" in
    i?86-* | k?-*)
	AC_DEFINE([ARCH_X86], 1,[x86 architecture])
dnl
dnl FreeBSD (NetBSD? OpenBSD?) gives i386 anyway
dnl
    case "$host" in
      *-*-freebsd*) OPT_FLAGS="$CFLAGS" ;;
      *)
	case "$host_cpu" in
	i386-*) OPT_CFLAGS="$CFLAGS -mcpu=i386";;
	i486-*) OPT_CFLAGS="$CFLAGS -mcpu=i486";;
	i586-*) OPT_CFLAGS="$CFLAGS -mcpu=pentium";;
	i686-*) OPT_CFLAGS="$CFLAGS -mcpu=pentiumpro";;
	k6-*)   OPT_CFLAGS="$CFLAGS -mcpu=k6";;
	esac ;;
     esac
	AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS]);;
    sparc-*)
	OPT_CFLAGS="$CFLAGS -mcpu=ultrasparc -mvis"
	AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS]);;
    mips-sgi-irix6.*)	dnl do we need to be that specific ?
	OPT_CFLAGS="$CFLAGS -mabi=64"
	AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS]);;
    esac
else
    dnl non-gcc flags - we probably need exact configuration triplets here.
    case "$host_cpu" in
    mips-sgi-irix6.*)
	OPT_CFLAGS="$CFLAGS -64"
	AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS]);;
    sparc-sun-solaris*)
	OPT_CFLAGS="$CFLAGS -xCC -fast -xO5"
	AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS]);;
    esac
fi

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
dnl AC_CONFIG_SUBDIRS(libltdl)

AC_ARG_ENABLE([warnings],
    AC_HELP_STRING([--enable-warnings], [treat warnings as errors]))
if test x"$enable_warnings" = x"yes" -a x"$GCC" = x"yes"; then
    dnl compiler warnings
    OPT_CFLAGS="-Wall -Werror $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
fi

AC_SUBST(CFLAGS)

LTLIBOBJS=`echo "$AC_LIBOBJ" | sed 's,.o ,.lo ,g;s,.o$,.lo,'`
AC_SUBST(LTLIBOBJS)


OPT_CFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 $CFLAGS"
AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
AC_SUBST(CFLAGS)

OPT_CFLAGS="-fno-unit-at-a-time $CFLAGS"
AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
AC_SUBST(CFLAGS)

OPT_CXXFLAGS="$CXXFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
AC_TRY_CXXFLAGS([$OPT_CXXFLAGS],[CXXFLAGS=$OPT_CXXFLAGS])
AC_SUBST(CXXFLAGS)

dnl
dnl fast integers
dnl
AC_MSG_CHECKING(if fast integers are available)
AC_TRY_COMPILE([
#include <inttypes.h>
], [
volatile uint_fast64_t i=0x01234567;
return 0
], [
AC_MSG_RESULT([yes])
], [
AC_DEFINE(EMULATE_FAST_INT, 1, [Define if your system lacks uint_fast64_t])
AC_MSG_RESULT([no])
])


dnl
dnl static import frame buffer 
dnl

statbuf=yes
AC_MSG_CHECKING(for internal static framebuffer support)
AC_ARG_ENABLE(statbuffer,  AC_HELP_STRING([--enable-statbuffer], [enable internal static framebuffer support (yes)]), 
[
if test x"${enableval}" = x"yes" -a x"$GCC" = x"yes"; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
    statbuf=no
fi], AC_MSG_RESULT(yes))

if test x"${statbuf}" = x"yes"; then
	AC_DEFINE_UNQUOTED([STATBUFFER], 1, [Use the static buffers])	
fi
AC_SUBST(STATBUFFER)

dnl
dnl experimental network streaming support
dnl

net=yes
AC_MSG_CHECKING(for network streaming support)
AC_ARG_ENABLE(netstream,  AC_HELP_STRING([--enable-netstream], [enable network streaming support (yes)]), 
[
if test x"${enableval}" = x"yes" -a x"$GCC" = x"yes"; then
    AC_MSG_RESULT(yes)
    net=yes
    AC_DEFINE_UNQUOTED([NET_STREAM], 1, [Enable network functionality])	
else
AC_MSG_RESULT(no)
net=no
fi], AC_MSG_RESULT(yes))
AM_CONDITIONAL(NET_STREAM, test x"$net" = x"yes")

if test x"${net}" = x"yes"; then
    AC_DEFINE_UNQUOTED([NET_STREAM], 1, [Enable network functionality])	
fi
AC_SUBST(NET_STREAM)


dnl
dnl AVIFILE support
dnl

AM_PATH_AVIFILE(AC_DEFINE([HAVE_AVIFILE], 1, [Have Avifile support]))
AM_CONDITIONAL(HAVE_AVIFILE, test x"$have_avifile" = "xyes")

dnl
dnl freetype
dnl

freetype2=yes
AC_MSG_CHECKING(wether to enable filter_text)
AC_ARG_ENABLE(text,  AC_HELP_STRING([--enable-text], [enable the text filter (yes)]),
[
if test x"${enableval}" = x"no"; then
freetype2=no
AC_MSG_RESULT(no)
else
freetype2=yes
    AC_MSG_RESULT(yes)
fi], )


if test x"${freetype2}" = x"yes"; then
    AC_CHECK_FT2([9.2.0],[freetype2=yes
	      AC_DEFINE([HAVE_FREETYPE2], 1, [Define if you  have the freetype2 lib])
	      ],[freetype2=no])
fi
AM_CONDITIONAL(HAVE_FREETYPE2,test x"$freetype2" = "xyes")

dnl
dnl v4l
dnl

AC_CHECK_HEADERS([linux/videodev.h], [v4l=yes], [v4l=no])
AC_CHECK_HEADERS([linux/videodev2.h], [v4l2=yes], [v4l2=no], [
#include <linux/types.h>
])

if test $v4l2 = yes; then
AC_MSG_CHECKING([for struct v4l2_buffer in videodev2.h])
dnl (includes, function-body, [action-if-found], [action-if-not-found])
AC_TRY_COMPILE([
#include <linux/types.h>
#include <linux/videodev2.h>
], [
struct v4l2_buffer buf;
buffer.memory   = V4L2_MEMORY_MMAP
], [v4l2=yes
    AC_DEFINE(HAVE_STRUCT_V4L2_BUFFER, 1, [define if your videodev2 header has struct v4l2_buffer])
    AC_MSG_RESULT([yes])
], 
[v4l2=no])
    AC_MSG_RESULT([no])
fi



AC_MSG_CHECKING(for v4l support)
AC_ARG_ENABLE(v4l,  AC_HELP_STRING([--enable-v4l],[enable experimental v4l support (no)]), 
[
if test x"${enableval}" = x"yes" ; then
    v4l=yes
else
    AC_MSG_RESULT(no)
    v4l=no
fi], )

if test x"${v4l}" = x"yes" -o x"${v4l2}" = x"yes"; then
AC_DEFINE([HAVE_V4L], 1, [Have Video4linux headers])	
AC_MSG_RESULT(yes)
   v4l=yes
else
AC_MSG_RESULT(no)
fi

AM_CONDITIONAL(HAVE_V4L, test x"${v4l}" = x"yes")

dnl
dnl lame support
dnl

AM_PATH_LAME(AC_DEFINE([HAVE_LAME], 1, [Have lame lib support]))
AM_CONDITIONAL(HAVE_LAME, test x"$have_lame" = "xyes")
AM_CONDITIONAL(LAME_3_89, test x"$lame89" = "xyes")

dnl
dnl ogg support
dnl

AM_PATH_OGG(AC_DEFINE([HAVE_OGG], 1, [Have Ogg support]))
AM_CONDITIONAL(HAVE_OGG, test x"$have_ogg" = "xyes")

dnl
dnl vorbis support
dnl

AM_PATH_VORBIS(AC_DEFINE([HAVE_VORBIS], 1, [Have Vorbis support]))
AM_CONDITIONAL(HAVE_VORBIS, test x"$have_vorbis" = "xyes")

dnl
dnl theora support
dnl

AM_PATH_THEORA(AC_DEFINE([HAVE_THEORA], 1, [Have Theora support]))
AM_CONDITIONAL(HAVE_THEORA, test x"$have_theora" = "xyes")

dnl
dnl libdvdread support
dnl

have_dvdread=no
AM_PATH_LIBDVDREAD(AC_DEFINE([HAVE_LIBDVDREAD], 1, [Have Libdvdread support]))
AM_CONDITIONAL(HAVE_LIBDVDREAD, test x"$have_dvdread" = "xyes")

dnl
dnl libxvidcore support
dnl
dnl Disabled because it was never really needed -- tibit
dnl have_xvidcore=no
dnl AM_PATH_LIBXVID(AC_DEFINE([HAVE_LIBXVID], 1, [Have XVID support]))
dnl AM_CONDITIONAL(HAVE_LIBXVID, test x"$have_xvidcore" = "xyes")

default_xvid="xvid2"
new_xvid=${default_xvid}

AC_ARG_WITH(default-xvid,  AC_HELP_STRING([--with-default-xvid=xvid2],[Default xvid (xvid2)]), 
[ 
 new_xvid=$withval 
], )

XVID_DEFAULT="${new_xvid}"
AC_SUBST(XVID_DEFAULT)

dnl
dnl libmpeg3 support
dnl

AM_PATH_LIBMPEG3(AC_DEFINE([HAVE_LIBMPEG3], 1, [Have libmpeg3 support]))
AM_CONDITIONAL(HAVE_LIBMPEG3, test x"$have_libmpeg3" = "xyes")

dnl
dnl MPlayer libpostproc
dnl

dnl AM_PATH_POSTPROC(AC_DEFINE([HAVE_LIBPOSTPROC], 1, [Have libpostproc support]))
dnl AM_CONDITIONAL(HAVE_LIBPOSTPROC, test x"$have_libpostproc" = "xyes")

dnl
dnl GM's lve
dnl

AM_PATH_LVE(AC_DEFINE([HAVE_LIBLVE], 1, [Have liblve support]))
AM_CONDITIONAL(HAVE_LIBLVE, test x"$have_liblve" = "xyes")

dnl
dnl PVM
dnl

AM_PATH_PVM3(AC_DEFINE([HAVE_PVM3], 1, [Have pvm3 support]))
AM_CONDITIONAL(HAVE_PVM3, test x"$have_pvm3" = "xyes")

dnl
dnl DV support
dnl

AM_PATH_DV(AC_DEFINE([HAVE_DV], 1, [Have dv support]))
AM_CONDITIONAL(HAVE_DV, test x"$have_dv" = "xyes")

dnl
dnl libquicktime support
dnl

AM_PATH_QT(AC_DEFINE([HAVE_QT], 1, [Have quicktime support]))
AM_CONDITIONAL(HAVE_QT, test x"$have_qt" = "xyes")

dnl
dnl libquicktime support
dnl

AM_PATH_OPENQT(AC_DEFINE([HAVE_OPENQT], 1, [Have openquicktime support]))
AM_CONDITIONAL(HAVE_OPENQT, test x"$have_openqt" = "xyes")

dnl
dnl LZO support
dnl

AM_PATH_LZO(AC_DEFINE([HAVE_LZO], 1, [Have liblzo support]))
AM_CONDITIONAL(HAVE_LZO, test x"$have_lzo" = "xyes")

dnl dnl
dnl dnl LIBZ support
dnl dnl
dnl 
dnl AM_PATH_LIBZ(AC_DEFINE([HAVE_LIBZ], 1, [Have libz support]))
dnl AM_CONDITIONAL(HAVE_LIBZ, test x"$have_libz" = "xyes")

dnl
dnl A52 support
dnl

AM_PATH_A52(AC_DEFINE([HAVE_A52], 1, [Have liba52 support]))
AM_CONDITIONAL(HAVE_A52, test x"$have_a52" = "xyes")

dnl
dnl use liba52 as the default decoder 
dnl

a52_decoder=yes

if test x"$have_a52" = "xyes"; then
AC_MSG_CHECKING(for liba52 as default decoder)
AC_ARG_ENABLE(liba52,  AC_HELP_STRING([--enable-liba52], [liba52 as default decoder (no)]), 
[
if test x"${enableval}" = x"yes" -a x"$GCC" = x"yes"; then
    AC_MSG_RESULT(yes)
    a52_decoder=yes
else
    AC_MSG_RESULT(no)
    a52_decoder=no
fi], AC_MSG_RESULT(no))

if test x"${a52_decoder}" = x"yes"; then
	AC_DEFINE_UNQUOTED([USE_LIBA52_DECODER], 1, [Use the liba52 decoder as default])	
fi
AC_SUBST(USE_LIBA52_DECODER)
else
AC_MSG_CHECKING(for use libac3 as default decoder)
AC_MSG_RESULT(yes)
fi

dnl
dnl libxml2 support
dnl

AC_SUBST([LIBXML2_CFLAGS])
AC_SUBST([LIBXML2_LIBS])
AC_CHECK_PROG([have_libxml2],[xml2-config],[yes])
if test x"$have_libxml2" = x"yes"
then
       AC_DEFINE([HAVE_LIBXML2],1 ,[libxml2 support])
       LIBXML2_CFLAGS="`xml2-config --cflags`"
       LIBXML2_LIBS="`xml2-config --libs`"
else
	have_libxml2=no
fi

AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" = x"yes" )

have_ibp=no
dnl
dnl lors support
dnl
OLD_LIBS="$LIBS"
AC_ARG_ENABLE(ibp,[
  --enable-ibp		  enable ibp support (no)], ,enable_ibp=no)
AC_MSG_CHECKING(for use ibp and lors)
AC_SUBST([IBP_LIBS])
if test "x$enable_ibp" = "xyes"
then
if test x"$have_libxml2" = x"yes"
then
AC_ARG_WITH(libfdr,[  --with-libfdr=DIR       base directory for libfdr],
            [CPPFLAGS="-I$with_libfdr/include $CPPFLAGS",
	     LIBFDR=yes,
             IBP_LIBS1="-L$with_libfdr/lib -lfdr $LIBS"],
             [AC_CHECK_LIB(fdr,jval_v,
                           [IBP_LIBS1="-lfdr"],
                           AC_MSG_ERROR(unable to locate libfdr))])

AC_ARG_WITH(libibp,[  --with-libibp=DIR    	  base directory for libibp],
            [CPPFLAGS="-I$with_libibp/include $CPPFLAGS",
	     LIBIBP=yes,
             IBP_LIBS1="-L$with_libibp/lib -libp -lpthread $IBP_LIBS1"],
            [LIBS="-lpthread $IBP_LIBS1"
             AC_CHECK_LIB(ibp,IBP_allocate,
                          [IBP_LIBS1="-libp -lpthread $IBP_LIBS1"],
                          AC_MSG_ERROR(unable to locate libibp))])

AC_ARG_WITH(libexnode,[  --with-libexnode=DIR    base directory for libexnode],
            [CPPFLAGS="-I$with_libexnode/include/libexnode $CPPFLAGS",
	     LIBEXNODE=yes,
             IBP_LIBS1="-L$with_libexnode/lib -lexnode $IBP_LIBS1"],
            [LIBS="$IBP_LIBS1"
	      AC_CHECK_LIB(exnode,exnodeCreateExnode,
                          [IBP_LIBS1="-lexnode $IBP_LIBS1"],
                          AC_MSG_ERROR(unable to locate libexnode),
			  $IBP_LIBS1
			  )])

AC_ARG_WITH(liblbone,[  --with-liblbone=DIR     base directory for liblbone],
            [CPPFLAGS="-I$with_liblbone/include $CPPFLAGS",
	     LIBLBONE=yes,
             IBP_LIBS1="-L$with_liblbone/lib -llbone $IBP_LIBS1"],
            [LIBS="$IBP_LIBS1"
	     AC_CHECK_LIB(lbone,lbone_checkDepots,
                          [IBP_LIBS1="-llbone $IBP_LIBS1"],
                          AC_MSG_ERROR(unable to locate liblbone))])
AC_ARG_WITH(libend2end,[  --with-libend2end=DIR   base directory for libend2end],
            [CPPFLAGS="-I$with_libend2end/include $CPPFLAGS",
	     LIBE2E=yes,
             IBP_LIBS1="-L$with_libend2end/lib -lend2end -lmd5 -ldes -laes $IBP_LIBS1"],
            [LIBS="-lmd5 -ldes -laes $IBP_LIBS1 -lz"
             AC_CHECK_LIB(end2end,ConditionMapping,
                          [IBP_LIBS1="-lend2end -lmd5 -ldes -laes $IBP_LIBS1"],
                          AC_MSG_ERROR(unable to locate libend2end))])

AC_ARG_WITH(liblors,[  --with-liblors=DIR      base directory for liblors],
            [CPPFLAGS="-I$with_liblors/include $CPPFLAGS",
	     LIBLORS=yes,
             IBP_LIBS1="-L$with_liblors/lib -llors $IBP_LIBS1"],
            [LIBS="$IBP_LIBS1 $LIBXML2_LIBS -lz"
	     AC_CHECK_LIB(lors,lorsExnodeCreate,
                          [IBP_LIBS1="-llors $IBP_LIBS1"],
                          AC_MSG_ERROR(unable to locate liblors))])
AC_DEFINE([HAVE_IBP],1 ,[ibp and lors support])
IBP_LIBS="$IBP_LIBS1"
have_ibp=yes
fi 
fi
LIBS="$OLD_LIBS"
AM_CONDITIONAL(HAVE_IBP, test x"$have_ibp" = x"yes" )

dnl 
dnl mjpegtools (actually only YUV4MPEG) support
dnl
mjepgtools=yes

AC_MSG_CHECKING([whether mjpegtools support is requested])
AC_ARG_ENABLE(mjpeg,  AC_HELP_STRING([--enable-mjpeg], [build mjpeg dependent plugins (yes)]), 
[
if test x"${enableval}" = x"yes" ; then
   AC_MSG_RESULT(yes)
   mjpegtools=yes
else 
   AC_MSG_RESULT(no)
   mjpegtools=no
fi], [
   AC_MSG_RESULT(yes)
   mjpegtools=yes]
)

if test "$mjpegtools" = "yes"; then

AC_MSG_CHECKING([for YUV4MPEG support])

AC_SUBST([MJPEG_CFLAGS])
AC_SUBST([MJPEG_LIBS])
AC_CHECK_PROG([MJPEGTOOLSCONFIG],[mjpegtools-config],[yes])
if test x"$MJPEGTOOLSCONFIG" = x"yes"
then
	AC_DEFINE([HAVE_MJPEGTOOLS], 1,[mjpegtools support])
	AC_DEFINE([HAVE_MJPEG], 1, [Have mjpeg suppport])
  	MJPEG_CFLAGS="`mjpegtools-config --cflags`"
  	MJPEG_LIBS="`mjpegtools-config --libs`"
	mjpeg_incs="`mjpegtools-config --prefix`/include/mjpegtools"
	AC_CHECK_FILE($mjpeg_incs/yuv4mpeg.h, 
	   [AC_DEFINE(HAVE_MJPEG_INC, 1, mjpeg include)])

  dnl
  dnl check if we have version >= Mar 31 2004

  CFLAGS="$CFLAGS $MJPEG_CFLAGS"
  LIBS="$LIBS $MJPEG_LIBS"
  AC_TRY_LINK([
  #if defined(HAVE_MJPEG_INC)
  #include "yuv4mpeg.h"
  #include "mpegconsts.h"
  #else
  #include "mjpegtools/yuv4mpeg.h"
  #include "mjpegtools/mpegconsts.h"
  #endif],
  [y4m_write_frame_header(1, NULL, NULL)], 
    [AC_DEFINE(USE_NEW_MJPEGTOOLS_CODE, 1, using mjpegtools post Mar 31 2004)])
  CFLAGS="$ac_save_CFLAGS"
  LIBS="$ac_save_LIBS"

else
MJPEGTOOLSCONFIG=no
fi
else
MJPEGTOOLSCONFIG=no
fi

AM_CONDITIONAL(HAVE_MJPEG, test x"$MJPEGTOOLSCONFIG" = x"yes" )

dnl ---------------------------------------------------------------------
dnl X11 checks

dnl AC_MSG_CHECKING([whether X11 support is requested])
dnl Default is enabled X11

dnl AC_ARG_ENABLE(x,  AC_HELP_STRING([--enable-x], [build X11 dependent plugins (yes)]), 
dnl [
dnl if test x"${enableval}" = x"yes" ; then
dnl     AC_MSG_RESULT(yes)
dnl     USE_X11=yes
dnl else
dnl     AC_MSG_RESULT(no)
dnl     USE_X11=no
dnl fi], [
dnl USE_X11=yes
dnl AC_MSG_RESULT(yes)]
dnl )

dnl if test "${USE_X11}" = "yes"; then

AC_PATH_XTRA
if test x${no_x} = xyes; then
  	AC_MSG_WARN(can not find X11)
        USE_X11=no
else
AC_DEFINE([HAVE_X11], 1, [Have X11 support])
USE_X11=yes
fi

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_includes)
AC_SUBST(x_libraries)

dnl fi

AM_CONDITIONAL(HAVE_X11, test x"${USE_X11}" = "xyes")

have_xv=no
AC_CHECK_LIB(Xv, XvQueryExtension,
[	AC_DEFINE([HAVE_LIBXV], 1, [Have libxv support])
	have_xv=yes
],, $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AM_CONDITIONAL(HAVE_LIBXV, test x"$have_xv" = "xyes")

have_xaw_simple=false
AC_CHECK_HEADERS([X11/Xaw/Simple.h], 
		 [have_xaw_simple=true
		  AC_DEFINE([HAVE_XAW_SIMPLE], 1, [Have the Xaw Simple.h file support])
		  ], [have_xaw_simple=false])
AM_CONDITIONAL(HAVE_XAW_SIMPLE, test x"$have_xaw_simple" = x"true" )

have_xpm=no
AC_CHECK_LIB(Xpm, XpmFreeAttributes,
	     AC_DEFINE([HAVE_LIBXPM], 1, [Have libXpm support]) 
	     have_xpm=yes, , 
	     [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
AM_CONDITIONAL(HAVE_LIBXPM, test x"$have_xpm" = "xyes")

have_sdl=no
AM_PATH_SDL(1.1.6, 
[	AC_DEFINE([HAVE_SDL], 1, [Have libsdl support])
	have_sdl=yes
])
AM_CONDITIONAL(HAVE_SDL, test x"$have_sdl" = "xyes")

have_divx_decore=false
AC_CHECK_HEADERS([decore.h], 
		 [have_divx_decore=true
		  AC_DEFINE([HAVE_DIVX_DECORE], 1, [Have the Divx4linux decore.h header file])
		  ], [have_divx_decore=false])
AM_CONDITIONAL(HAVE_DIVX_DECORE, test x"$have_divx_decore" = x"true" )

have_divx_encore2=false
AC_CHECK_HEADERS([encore2.h], 
		 [have_divx_encore2=true
		  AC_DEFINE([HAVE_DIVX_ENCORE2], 1, [Have the Divx4linux encore2.h header file])
		  ], [have_divx_encore2=false])
AM_CONDITIONAL(HAVE_DIVX_ENCORE2, test x"$have_divx_encore2" = x"true" )

have_gtk=no
AM_PATH_GTK(,
[
	AC_DEFINE([HAVE_GTK], 1, [Have GTK support]) 
	have_gtk=yes	
])
AM_CONDITIONAL(HAVE_GTK, test x"$have_gtk" = "xyes")

dnl
dnl LIBFAME support
dnl

have_libfame=no
AM_PATH_LIBFAME(,
[
	AC_DEFINE([HAVE_LIBFAME], 1, [Have libfame support]) 
	have_libfame=yes	
])
AM_CONDITIONAL(HAVE_LIBFAME, test x"$have_libfame" = "xyes")

dnl
dnl MAGICK support
dnl

AM_PATH_MAGICK(AC_DEFINE([HAVE_MAGICK], 1, [Have ImageMagick support]))
AM_CONDITIONAL(HAVE_MAGICK, test x"$have_magick" = "xyes")

dnl
dnl libjpg support
dnl

AM_PATH_LIBJPEG(AC_DEFINE([HAVE_LIBJPEG], 1, [Have libjpeg support]))
AM_CONDITIONAL(HAVE_LIBJPEG, test x"$have_libjpeg" = "xyes")

dnl
dnl ffmpeg support
dnl

AM_PATH_FFMPEG(AC_DEFINE([HAVE_FFMPEG], 1, [Have ffmpeg binary support]))
AM_CONDITIONAL(HAVE_FFMPEG, test x"$have_ffmpeg" = "xyes")

dnl
dnl avilib
dnl

AVILIB_CFLAGS="-I\$(top_srcdir)/avilib"
AVILIB_LIBS="-L\$(top_builddir)/avilib -lavi"
AC_SUBST(AVILIB_CFLAGS)
AC_SUBST(AVILIB_LIBS)

dnl
dnl libioaux
dnl

TCIOAUX_CFLAGS="-I\$(top_srcdir)/libioaux"
TCIOAUX_LIBS="-L\$(top_builddir)/libioaux -ltcioaux"
AC_SUBST(TCIOAUX_CFLAGS)
AC_SUBST(TCIOAUX_LIBS)

dnl
dnl libac3
dnl

AC3_CFLAGS="-I\$(top_srcdir)/libac3"
AC3_LIBS="-L\$(top_builddir)/libac3 -lac3_tc"
AC_SUBST(AC3_CFLAGS)
AC_SUBST(AC3_LIBS)

dnl
dnl libmpeg2
dnl

MPEG2CVS_CFLAGS="-I\$(top_srcdir)/libmpeg2"
MPEG2CVS_LIBS="-L\$(top_builddir)/libmpeg2 -lmpeg2cvs"
AC_SUBST(MPEG2CVS_CFLAGS)
AC_SUBST(MPEG2CVS_LIBS)

dnl
dnl libavcodec
dnl

AM_PATH_FFMPEG_LIBS(AC_DEFINE([HAVE_FFMPEG_LIBS], 1, [Have ffmpeg avcodec libraray support]))
AM_CONDITIONAL(HAVE_FFMPEG_LIBS, test x"$have_ffmpeg_libs" = "xyes")

dnl AVCODEC_CFLAGS="-I\$(top_srcdir)/ffmpeg/libavcodec"
dnl AVCODEC_LIBS="-L\$(top_builddir)/ffmpeg/libavcodec -ltcavcodec"
dnl if test x"$have_libz" = "xyes"; then
dnl   AVCODEC_CFLAGS="$AVCODEC_CFLAGS $LIBZ_CFLAGS";
dnl   AVCODEC_LIBS="$AVCODEC_LIBS $LIBZ_LIBS";
dnl fi
dnl AC_SUBST(AVCODEC_CFLAGS)
dnl AC_SUBST(AVCODEC_LIBS)

dnl
dnl libxio if requested
dnl

libxio=no

AC_MSG_CHECKING([whether internal libxio support is requested])
AC_ARG_ENABLE(xio,  AC_HELP_STRING([--enable-xio], [link to the xio library (no)]), 
[
if test x"${enableval}" = x"yes" ; then
   AC_MSG_RESULT(yes)
   libxio=yes
else 
   AC_MSG_RESULT(no)
   libxio=no
fi], [
   AC_MSG_RESULT(no)
   libxio=no]
)
if test $libxio = yes; then
if test x"$have_ibp" = x"yes"
then
	XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
	XIO_LIBS="-L\$(top_builddir)/libxio -lxio $IBP_LIBS $LIBXML2_LIBS"
else
	XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
	XIO_LIBS="-L\$(top_builddir)/libxio -lxio"
fi
else 
XIO_CFLAGS="-I\$(top_srcdir)/libxio"
XIO_LIBS=""
fi

AC_SUBST(XIO_CFLAGS)
AC_SUBST(XIO_LIBS)

dnl import/export module path

MOD_PATH="\${prefix}/lib/transcode"

AC_ARG_WITH(mod-path, AC_HELP_STRING([--with-mod-path], [where export/import modules are installed (${prefix}/lib/transcode)]), MOD_PATH=$withval)
AC_SUBST(MOD_PATH)

transcode_0_6=yes
AC_DEFINE([TRANSCODE_0_6], 1, [Define for transcode_0_6])
AM_CONDITIONAL(TRANSCODE_0_6,test x"$transcode_0_6" = x"yes")

X_CFLAGS=`echo $X_CFLAGS | sed -e 's/  */ /g'`
X_PRE_LIBS=`echo $X_PRE_LIBS | sed -e 's/  */ /g'`
X_LIBS=`echo $X_LIBS | sed -e 's/  */ /g'`
X_EXTRA_LIBS=`echo $X_EXTRA_LIBS | sed -e 's/  */ /g'`

CC=`echo $CC | sed -e 's/  */ /g'`
CFLAGS=`echo $CFLAGS | sed -e 's/  */ /g'`
CPPFLAGS=`echo $CPPFLAGS | sed -e 's/  */ /g'`
CXXFLAGS=`echo $CXXFLAGS | sed -e 's/  */ /g'`
LDFLAGS=`echo $LDFLAGS | sed -e 's/  */ /g'`

AC_SUBST(CFLAGS)
AC_SUBST(CC)
AC_SUBST(LDFLAGS)

dnl			ffmpeg/Makefile
dnl			ffmpeg/libavcodec/Makefile
dnl			ffmpeg/libavcodec/i386/Makefile
dnl			ffmpeg/libavcodec/ppc/Makefile

AC_OUTPUT([
           Makefile
	   libxio/Makefile
           autotools/Makefile
           src/Makefile
           avilib/Makefile
	   libioaux/Makefile
           libac3/Makefile
           libvo/Makefile
           libmpeg2/Makefile
           libmp3lame/Makefile
           libdvenc/Makefile
           bbmpeg/Makefile
           bbmpeg/tcmplex/Makefile
           export/Makefile
           import/Makefile
           import/nuv/Makefile
           import/af6/Makefile
           import/net/Makefile
           import/v4l/Makefile
           import/lve/Makefile
           import/yuv/Makefile
           filter/Makefile
           filter/pp/Makefile
           filter/subtitler/Makefile
           filter/preview/Makefile
           filter/divxkey/Makefile
           filter/extsub/Makefile
           filter/resample/Makefile
           filter/test/Makefile
           filter/ivtc/Makefile
           filter/yuvdenoise/Makefile
           filter/tomsmocomp/Makefile
           pvm3/Makefile
           docs/Makefile
           docs/html/Makefile
           docs/man/Makefile
           contrib/Makefile
	   contrib/pnmpvn/Makefile
           tools/Makefile
           aclib/Makefile
           libsupport/Makefile
           libdldarwin/Makefile
           transcode.spec
          ])

dnl openquicktime dependent modules                  $have_openqt
dnl XVID support with libxvidcore                    $have_xvidcore
dnl libpostproc dependent filter plugin      	 yes

if test x${lame_version} = x1; then
  lame_print="static"
else
  lame_print=$lame_version
fi

AC_MSG_RESULT([
----------------------------------------------------------
Summary for transcode $VERSION features:

*-*-*-*-*-*-* Core *-*-*-*-*-*-*
static AV-frame buffering                        $statbuf
support for network (sockets) streams            $net
DVD navigation support with libdvdread           $have_dvdread
link against local lame library (>=3.89) | ver   $lame89 | $lame_print
experimental xio | support for IBP storage	 $libxio | $have_ibp
pvm3 support					 $have_pvm3
*-*-*-*-*-*-* Codec *-*-*-*-*-*-*
nasm dependent modules (bbmpeg)                  $nasm
mjpegtools dependent modules                     $MJPEGTOOLSCONFIG
libdv dependent modules			         $have_dv
Ogg support | Vorbis support | Theora support    $have_ogg | $have_vorbis | $have_theora
Default xvid export module                       $XVID_DEFAULT
liba52 audio plugin (>=0.7.3) | default decoder  $have_a52 | $a52_decoder
avifile API support                              $have_avifile
ImageMagick dependent modules (>=5.4.3)          $have_magick
libjpeg dependent modules | mmx accel            $have_libjpeg | $have_libjpegmmx
liblzo dependent modules 			 $have_lzo
libxml2 dependent modules                        $have_libxml2
experimental v4l support                         $v4l
experimental lve support                         $have_liblve
libmpeg3 dependent modules                       $have_libmpeg3
libfame video encoding plugin                    $have_libfame
quicktime dependent modules                      $have_qt
ffmpeg libs headers                              $with_ffmpeg_libs_i
ffmpeg libs libraries                            $with_ffmpeg_libs_l
ffmpeg libs build                                $FFMPEG_BUILD
ffmpeg libs version                              $FFMPEG_VERSION
ffbin modules                                    $have_ffmpeg
*-*-*-*-*-*-* Filter *-*-*-*-*-*-*
X11 dependent filter plugins                     $USE_X11
freetype2 dependent filter (text, subtitler)     $freetype2
----------------------------------------------------------
])
if test x"$have_x86cpu" = x"true"; then
  case "${NASM}" in
  no)
     AC_MSG_RESULT([
It is recommended that you install/upgrade your nasm.
You need at least 0.9.34 from http://nasm.sf.net])
  ;;
  esac
fi

case x${target_os} in
   xdarwin*)
   ed libtool <<EOF 
,s/deplibs_check_method=.*/deplibs_check_method="pass_all"/
wq
EOF
   ;;
esac

case x${target_cpu} in
   xx86_64*)
   ed libtool <<EOF 
,s/deplibs_check_method=.*/deplibs_check_method="pass_all"/
wq
EOF
   ;;
esac

