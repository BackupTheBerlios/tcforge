.TH transcode 1 "1st November 2003" "transcode(1)"
.SH NAME
transcode \- LINUX video stream processing tool
.SH SYNOPSIS
.na
.B transcode
[
.B options
] ...
.SH COPYRIGHT
\fBtranscode\fP is Copyright (C) by Thomas Östreich.
.SH DESCRIPTION
.LP
\fItranscode\fP is a linux text-console utility for video stream
processing, running on a platform that supports shared libraries and
threads.
.LP
Decoding and encoding is done by loading modules that are responsible
for feeding transcode with raw video/audio streams (import modules)
and encoding the frames (export modules).
.LP
It supports elementary video and audio frame transformations,
including de-interlacing or fast resizing of video frames and loading
of external filters.
.LP
A number of modules are included to enable import of DVDs on-the-fly,
MPEG elementary (ES) or program streams (VOB), MPEG video, Digital
Video (DV), YUV4MPEG streams, NuppelVideo file format, AVI
based codecs and raw or compressed (pass-through) video
frames and export modules for writing DivX;-), XviD, DivX
4.xx/5.xx or uncompressed AVI and raw files with MPEG, AC3
(pass-through) or PCM audio.
.LP
Additional export modules to write single frames (PPM) or YUV4MPEG
streams are available, as well as an interface import module to the
avifile library.
.LP
It's modular concept is intended to provide flexibility and easy user
extensibility to include other video/audio codecs or filetypes. A set
of tools is included to demux (tcdemux), extract (tcextract) and
decode (tcdecode) the sources into raw video/audio streams for import,
probing (tcprobe) and scanning (tcscan) your sources and to enable
post-processing of AVI files, fixing AVI file header information
(avifix), merging multiple files (avimerge), splitting large AVI
files (avisplit) to fit on a CD and avisync to correct
AV-offsyncs.
.SH OPTIONS
.TP
.B \-A
use AC3 as internal audio codec [off].
.br
Only pass-through supported.
.TP
.B \-B \fIn\fP[\fI,m\fP[,\fIM\fP]]
resize to height-\fIn\fP*\fIM\fP rows [,width-\fIm\fP*\fIM\fP] columns
[off,32]. \fIM\fP must be one of 8, 16 or 32. It makes no difference which M you use.
You might look at the \fIfast\fP flag of the \fB-Z\fP option if you don not
want to calculate \fIn\fP and \fIm\fP yourself.
.TP
.B \-C \fImode\fP
enable anti-aliasing mode (1-3) [off].
.RS
.TP 4
.I 1
"de-interlace effects only"
.TP
.I 2
"resize effects only"
.TP 
.I 3
"process full frame (slow)"
.RE
.TP
.B \-D \fInum\fP
sync video start with audio frame num [0].
.TP
.B \-E \fIr\fP[\fI,b\fP[\fI,c\fP]]
audio output samplerate [Hz], bits per sample and channels [as input]. The option "-J resample" must be provided for export modules not capable of re-sampling.
.TP
.B \-F \fIcodec_string\fP
encoder parameter strings [module dependent].
.br
The \-F parameter has different meanings for different export modules.
.br

-y \fIaf6\fP:
  The codec String for the codec you want to encode to. Example values are -F "Uncompressed I420" or -F "OpenDivX 3.11 compatible decoder". To get a list of valid codecs, use -F invalid.

-y \fIffmpeg\fP:
  The codec String for the codec you want to encode. Example values are -F mpeg4 or -F mpeg1video or -F huffyuv. To get a list of valid codecs, use -F list

-y \fIim\fP:
  The name of the image format you want to export. Example values are '-F jpg' (default) or '-F png' or -F 'gif'. With -F jpg, -w gives quality in percent. With -F png, the first digit of -w gives compression level, the second one gives quality, so -w 95 selects best compression level (9) and 5 means PNG adaptive filtering.

-y \fIjpg\fP:
  The quality of the JPEG encode in percent. Example values are '-F 75' (default) or '-F 100'

-y \fImov\fP:
  The name of the quicktime codec. Example values are '-F mjpa' (default) '-F cvid' 

-y \fImpeg2enc\fP:
  Syntax: -F "<base-profile>[,<options_string>]"
    <base-profile> can be one of
      'mpeg1' = Generic MPEG1 (default)
      'vcd' = Standard VCD
    <options_string> will be passed down to mp1e untouched by transcode. Have a look at the manpage for mp1e.

-y \fImpeg\fP:
  Syntax: -F "<base-profile>[,<resizer-mode>[,user-profile]]"
    <base-profile> can be one of
      '1' = MPEG 1 (default)
      'b' = big MPEG 1 (experimental)
      'v' = VCD
      's' = SVCD
      '2' = MPEG2
      'd' = DVD compliant
    <resizer-mode> can be one of
       0 = disable resizer (default)
       1 = 352x288
       2 = 480x480
       3 = 480x576
       4 = 352x240
    <user-profile> is a filename of the profile file. You can either specify the absolute path to the file or if you transcode will look for it in the directory where you started transcode.

-y \fImpeg2enc\fP:
  Syntax: -F "<base-profile>[,<options_string>]"
    <base-profile> can be one of
      '0' = Generic MPEG1 (default)
      '1' = Standard VCD
      '2' = User VCD
      '3' = Generic MPEG2
      '4' = Standard SVCD
      '5' = User SVCD
      '6' = Manual parameter mode
      '8' = DVD
    <options_string> will be passed down to mpeg2enc untouched by transcode. Have a look at the manpage for mpeg2enc.

.TP
.B \-G \fIval\fP
Gamma correction (0.0-10.0) [off].
.br
A value of 1.0 does not change anything. A value lower than 1.0 will make the
picture "brighter", a value above 1.0 will make it "darker".
.TP
.B \-H \fIn\fP
auto-probe \fIn\fP MB of source (0=disable) default [1]
.br
Use a higher value than the default to detect all subtitles in the VOB.
.TP
.B \-I \fImode\fP
enable de-interlacing mode (1-5) [off].
.RS
.TP 4
.I 1
"interpolate scanlines" 
.br
linear interpolation (takes the average of the surronding even rows to
determine the odd rows), and copies the even rows as is.
.TP
.I 2
"handled by encoder"
.br
tells the encoding code to handle the fact that the frames are interlaced. Most
codecs do not handle this.
.TP
.I 3
"zoom to full frame" 
.br
drops to to half size, then zooms out. This can cause excessive blurring which
is not always unwanted. On the other hand results are quite good.
.TP
.I 4
"drop field / half height"
.br
drop every other field and keep half height.
.TP
.I 5
"interpolate scanlines / blend frames" 
.br
linear blend (similar to -vop pp=lb in mplayer) this, like linear blend
calculates the odd rows as the average of the surrounding even rows, and also
calculates the even rows as an average of the original even rows and also
calculates the even rows as an average of the original odd rows and averages
the calculated and original rows. Something like avg (avg(row1,row3), avg(row2, row4))
.RE
.TP
.B \-J \fIfilter1\fP[\fI,filter2\fP[\fI,...\fP]]
apply external filter plugins [off].  
A full-blown transcode installation has the following filter modules:
.IP
See the section
.BI FILTERS
for details.
.IP
To see what filters are available at your installation of transcode, execute
.nf
.B \	ls -1 `tcmodinfo -p`/filter*.so
.fi
Example:
.RS 

.nf
transcode [...] 
  \-J 32detect=force_mode=3,normalize,cut="0-100 300-400"
.fi

Will load the 32detect filter plugin with parameter force_mode=3, the
volume normalizer and the cut filter.
.RE
.IP
.B Note:
.RS
You can specify more than one \-J argument. The order of filter arguments
specify in which order the filters are applied. Note also, for transcode
internally it makes no difference whether you do "\-J filter1 \-J filter2"
or "\-J filter1,filter2"

Use 'tcmodinfo -i \fINAME\fP' to get more information about the
filter_\fINAME\fP. Not all filters support this but most of them do. Some of
the filter plugins have additional documentation in the docs/ directory.
The
.BI FILTERS
section documents nearly every filter which might be of use.
.RE
.TP
.B \-L \fIn\fP
seek to VOB stream offset \fIn\fPx2kB default [0]
.br
This option is usually calculated automatically when giving --nav_seek and -c.
.TP
.B \-K
enable black/white by removing colors mode (grayscale) [off].
.br
Please note this does not necessarily lead to a smaller image / better compression.
.br
For YUV mode, this is done by emptying the chroma planes, for RGB mode a
weightend grayscale value is computed.
.TP
.B \-M \fImode\fP
demuxer PES AV sync modes (0-4) [1].

.RS
.TP 0
.I Overview
The demuxer takes care that the right video frames go together with the right
audio frame. This can sometimes be a complex task and transcode tries to aid you
as much as possible.
.br
WARNING: It does make a difference if you (the user) specifies a demuxer to use
or if transcode resp. tcprobe(1) chooses the one which it thinks is right for
your material. 
.br
This is done on purpose to avoid mystic side-effects. So think twice, wether you
specify a demuxer or let transcode choose one or you might end up with an
off-sync result.
.TP 4
.I 0 
Pass-through.
Do not mess with the stream, switch off any synchronization/demuxing process. 
.TP
.I 1
PTS only (default)
Synchronize video and audio by inspecting PTS/DTS time stamps of audio and
video. Preferred mode for PAL VOB streams and DVDs.
.TP
.I 2 
NTSC VOB stream synchronization feature.
This mode generates synchronization information for transcode by
analyzing the frame display time.
.TP
.I 3
(like -M 1): sync AV at initial PTS,
but invokes "-D/--av_fine_ms" options internally based on "tcprobe" PTS
analysis. PTS stands for Presentation Time Stamp.
.TP
.I 4
(like -M 2): initial PTS / enforce frame rate,
with additional frame rate enforcement (for NTSC).
.RE
.TP
.B \-N \fI0xNN\fP
export audio format id [0x55].
.RS
Available format IDs are:
.TP 10
.I \ \ \ 0x1
PCM uncompressed audio
.TP
.I \ \ 0x50
MPEG layer-2 aka MP2
.TP
.I \ \ 0x55
MPEG layer-3 aka MP3
Also have a look at --lame_preset if you intend to do VBR audio.
.TP
.I 0x2000
AC3 audio
.TP
.I 0xfffe
OGG/Vorbis audio
.RE
.TP
.B \-O
flush lame mp3 buffer on encoder stop [off].
.TP
.B \-P \fIflag\fP
pass-through flag (0=off|1=V|2=A|3=A+V) [0].
.br
Pass-through for \fIflag\fP != 1 is broken and not a trivial thing to fix.
.br
You can pass-through DV video, AVI files and MPEG2 video. When doing MPEG2
pass-through (together with the -y raw module), you can give a requantization
factor by using -w -- for example -w 1.5 -- this will make the MPEG2 stream
smaller.
.IP
The pass-through mode is useful for reconstruction of a broken index of an AVI
file. The -x ffmpeg import-module analyzes the compressed bitstream and can
detect a keyframe for DIV3, MPEG4 (DivX, XviD, ..) and other formats. It then
sets an internal flag which the export module will respect when writing the
frame out.
.TP
.B \-Q \fIn\fP[\fI,m\fP]
encoding[,decoding] quality (0=fastest-5=best) [5,5].
.TP
.B \-R \fIn\fP[\fI,f1\fP[\fI,f2\fP]]
enable multi-pass encoding (0-3) [0,divx4.log,pcm.log].
.RS
.TP 4
.I 0\fR Constant bitrate (CBR) encoding. [default]
The codec tries to achieve constant bitrate output. This means, each encoded
frame is mostly the same size. This type of encoding can help in maintaining
constant filling of hardware buffer on set top players or smooth streaming
over networks. By the way, Constant bitrate is often obtained sacrifying
quality during high motion scenes.
.TP
.I 1\fR Variable bitrate encoding: First pass.
In this mode, the codec analyses the complete sequence in order to collect
data that can improve the distribution of bits in a second VBR pass. The
collected data is written to second sub argument (default: divx4.log). This
data is codec dependant and cannot be used across codecs. It is strongly
advised to use the same codec settings for the VBR analysis pass and the
VBR encoding pass if you want predictable results.
.IP
The video output of the first pass is not of much use and can grow very large.
It's a good idea to not save the video output to a file but directly to /dev/null.
Usually the bitrate is ignored during first pass.
.IP
Disabling audio export makes sense too, so use -y codec,null. It is \fBnot\fP
recommended to disable the audio \fBimport\fP because transcode might drop
video frames to keep audio and video in sync. This is not possible when the
audio import is disabled. It may lead to the fact that the codec will see a
different sequence of frames which effectively renders the log file invalid.
.TP
.I 2\fR Variable bitrate encoding: Second pass.
The first pass allowed the codec collecting data about the complete sequence.
During the second pass, the codec will use that data in order to find an
efficient bit distribution that respects both the desired bitrate and the
natural bitrate curve shape. This ensures a good compromise between quality
and desired bitrate.
.IP
Make sure you activate both sound and video encoding during this pass.
.TP
.I 3\fR Constant quantizer encoding.
The quantizer is the "compression level" of the picture. The lower the
quantizer is, the higher is the quality of the picture. This mode can help
in making sure the sequence is encoded at constant quality, but no prediction
can be made on the final bitrate. When using this mode, the \fB-w\fP option
changes its meaning, it now takes the quantizer ranging from 1 to 31.
.RE
.TP
.B \-S \fIunit\fP[\fI,s1-s2\fP]
process program stream unit[,s1-s2] sequences [0,all].
.br
This option is a bit redundant to --psu*. This option lets you specify which
units you want to have decoded or skipped. At a programm stream unit boundary,
all (internal) mpeg timers are reset to 0. tcprobe will tell you how many units
are in one file.
.TP
.B \-T \fIt\fP[\fI,c\fP[\fI,a\fP]]
select DVD title[,chapter[,angle]] [1,1,1]. Only a single chapter
is transcoded. Use -T 1,-1 to trancode all chapters in a row. You can
even specify chapter ranges.
.TP
.B \-U \fIbase\fP
process DVD in chapter mode to base-ch%02d.avi [off].
.TP
.B \-V
use YV12/I420 as internal video codec [off].
.br
This is usually much faster than RGB processing but some import modules may not
support this format. Always use this option when possible.
.TP
.B \-W \fIn\fP,\fIm\fP[,\fInav_file\fP] 
autosplit and process part \fIn\fP of \fIm\fP (VOB only) [off]
.TP
.B \-X \fIn\fP[,\fIm\fP,[\fIM\fP]]
resize to height+\fIn\fP*\fIM\fP rows [,width+\fIm\fP*\fIM\fP] columns [off,32]. M must be one of 8, 16 or 32. It makes no difference which M you use.
You might look at the \fIfast\fP flag of the \fB-Z\fP option if you don not
want to calculate \fIn\fP and \fIm\fP yourself.
.TP
.B \-Y \fItop\fP[\fI,left\fP[\fI,bottom\fP[\fI,right\fP]]]
select (encoder) frame region by clipping border. Negative values add a border [off].
.TP
.B \-Z \fIwidth\fPx\fIheight\fP[\fI,fast\fP]
resize to \fIwidth\fP columns, \fIheight\fP rows with filtering [off,notfast].
.br
If \fIfast\fP is given, transcode will calculate the parameters for \fB-X\fP
and/or \fB-B\fP. The option \fIfast\fP can only be used when
the import and export geometry of an image is a multiple of 8.

In fast mode, a faster but less precise resizing algorithm will be used
resulting in a slightly less good quality. Beside this (small) drawback, it is
worth a try.

It is also possible to omit \fIwidth\fP or \fIheight\fP. In this case,
transcode will calculate the missing value using the import aspect ratio. The
new value will be aligned to be a multiple of 8. Using an additional \fIfast\fP
is also possible.

Examples (assume input is a 16:9 coded file at 720x576):
   -Z 576x328       uses filtered zoom.
   -Z 576x328,fast  uses fast zoom.
   -Z 576x,fast     guess 328 and do fast zoom.
   -Z x328          guess 576 and do filtered zoom.
.TP
.B \-a \fIach\fP[\fI,vch\fP]
extract audio[,video] track for encoding.
.TP
.B \-b \fIb\fP[,\fIv\fP,[\fIq\fP,[\fIm\fP]]]
audio encoder bitrate kBits/s[,vbr[,quality[,mode]]] [128,0,5,0]

The \fImode\fP parameter specifies which modus lame should use for encoding.
Available modes are:
.RS 10
0\	Joint Stereo (default)
.br
1\	Full stereo
.br
2\	Mono
.RE
.TP
.B \-c \fIf1\fP\-\fIf2\fP[,\fIf3\fP\-\fIf4\fP[, ... ] ]
encode only frames \fIf1\-f2\fP [and \fIf3\-f4\fP]. Default is to encode
all available frames.  Use this and you'll get statistics about remaining
encoding time. The \fIf[N]\fP parameters may also be timecodes in the
HH:MM:SS.FRAME format.
.RS
Example: \-c 500\-0:5:01,:10:20\-1:18:02.1 
.IP
Will encode only from frame 500 to 5 minutes and 1 second and from 10 min,
20 sec to 1 hour, 18 min, 2 sec and one frame.
.RE
.IP
Note that transcode starts counting frames at \fI0\fP and excludes the last
frame specified. That means that "-c 0-100" will encoded 100 frames starting at
frame \fI0\fP up to frame \fI99\fP
.TP
.B \-d
swap bytes in audio stream [off].
.br
In most cases, DVD PCM audio tracks require swapping of audio bytes
.TP
.B \-e \fIr\fP[\fI,b\fP[\fI,c\fP]]
PCM audio stream parameter. Sample rate [Hz], bits per sample and
number of channels [48000,16,2]. Normally this is autodetected.
.TP
.B \-f \fIrate\fP[,\fIfrc\fP]
import video frame rate[,frc] [25.000,0]. If \fIfrc\fP (frame rate code) is specified,
transcode will calculate the precise frames per second internally. Valid values
for \fIfrc\fP are
.RS

\	frc\	:\	rate
.br
\	\ 1\	:\	23.976 (24000/1001.0)
.br
\	\ 2\	:\	24
.br
\	\ 3\	:\	25
.br
\	\ 4\	:\	29.970 (30000/1001.0)
.br
\	\ 5\	:\	30
.br
\	\ 6\	:\	50
.br
\	\ 7\	:\	59.940 (2 * 29.970)
.br
\	\ 8\	:\	60
.br
\	\ 9\	:\	\ 1
.br
\	10\	:\	\ 5
.br
\	11\	:\	10
.br
\	12\	:\	12
.br
\	13\	:\	15
.RE
.TP
.B \-g \fIwidth\fPx\fIheight\fP
video stream frame size [720x576].
.TP
.B \-h
print out usage information.
.TP
.B \-i \fIname\fP
input file/directory/device/mountpoint/host name, default is [/dev/zero].
.TP
.B \-j \fItop\fP[\fI,left\fP[\fI,bottom\fP[\fI,right\fP]]]
select frame region by clipping border. Negative values add a border [off].
.TP
.B \-k
swap red/blue (Cb/Cr) in video frame [off]. Use if people have blue faces.
.TP
.B \-l
mirror video frame [off].
.TP
.B \-m \fIfile\fP
write audio stream to separate file [off].
.TP
.B \-n \fI0xnn\fP
import audio format id [0x2000]. Normally, this is autodetected.
.TP
.B \-o \fIfile\fP
output file name, default is [/dev/null].
.TP
.B \-p \fIfile\fP
read audio stream from separate file [off].
.TP
.B \-q \fIdebuglevel\fP

.RS
\	QUIET\	  0
.br
\	INFO\	\	  1
.br
\	DEBUG\	  2
.br
\	STATS\	  4
.br
\	WATCH\	  8
.br
\	FLIST\	 16
.br
\	VIDCORE\	 32
.br
\	SYNC\	\	 64
.br
\	COUNTER\	128
.br
\	PRIVATE\	256
.RE
.TP
.B \-r \fIn\fP[,\fIm\fP]
reduce video height/width by n[,m] [off]. Example: \-r \fI2\fP will rescale the
framesize of a 720x576 file to 360x288.
.TP
.B \-s \fIgain\fP,[\fIcenter\fP,[\fIfront\fP,[\fIrear\fP]]]
increase volume of audio stream by gain,[center,front,rear] default [off,1,1,1].
.TP
.B \-t \fIn\fP,\fIbase\fP
split output to \fIbase\fP%03d.avi with \fIn\fP frames [off].
.TP
.B \-u \fIm\fP[\fI,n\fP]
use \fIm\fP framebuffer[,\fIn\fP threads] for AV processing [10,1].
.TP
.B \-v
print version.
.TP
.B \-w \fIb\fP[\fI,k\fP[\fI,c\fP]]
encoder bitrate[,keyframes[,crispness]] [(6000 for MPEG 1/2, 1800 for others),250,100].
.TP
.B \-\-video_max_bitrate \fIb\fP
Use \fIb\fP as maximal bitrate when encoding variable bitrate MPEG-2 streams
.TP
.B \-x \fIvmod\fP[\fI,amod\fP]
video[,audio] import modules [auto,auto]. If omitted, transcode will probe
for appropriate import modules. A full-blown transcode installation has the following import modules:
.IP
Module "ac3": (audio) AC3
.br
Module "af6": (video) Win32 dll | (audio) PCM
.br
Module "avi": (video) * | (audio) *
.br
Module "divx": (video) DivX;-)/XviD/OpenDivX/DivX 4.xx/5.xx
.br
Module "dv": (video) DV | (audio) PCM
.br
Module "dvd": (video) DVD | (audio) MPEG/AC3/PCM
.br
Module "ffmpeg": (video) FFMPEG API (build 4631) | MS MPEG4v1-3/MPEG4/MJPEG
.br
Module "im": (video) RGB
.br
Module "imlist": (video) RGB
.br
Module "lav": (video) LAV | (audio) WAVE
.br
Module "lzo": (video) 
.br
Module "mjpeg": (video) MJPEG
.br
Module "mov": (video) * | (audio) *
.br
Module "mp3": (audio) MPEG
.br
Module "mpeg2": (video) MPEG2
.br
Module "mpeg3": (video) MPEG2
.br
Module "mplayer": (video) rendered by mplayer | (audio) rendered by mplayer
.br
Module "null": (video) null | (audio) null
.br
Module "nvrec": (video) nvrec - v4l | (audio) nvrec - dsp
.br
Module "ogg": (video) * | (audio) Ogg Vorbis
.br
Module "raw": (video) RGB/YUV | (audio) PCM
.br
Module "rawlist": (video) YUV/RGB raw frames
.br
Module "vdrac3": (audio) VDR-AC3
.br
Module "vob": (video) MPEG-2 | (audio) MPEG/AC3/PCM | (subtitle)
.br
Module "v4l": (video) YUV/RGB | (audio) PCM
.br
Module "xml": (video) * | (audio) *
.br
Module "xvid":  (video) XviD/OpenDivX/DivX 4.xx/5.xx
.br
Module "yuv4mpeg": (video) YUV4MPEGx | (audio) WAVE
.IP
To see what your transcode has, do a  
.br
.B ls -1 `tcmodinfo -p`/import*.so
.IP
It is possible to pass option strings to import modules like to filter modules.
The average user does not this feature and not many modules support it. The syntax is
.B  \-x vmod=options,amod=options
.br
Example
  \-x rawlist=uyvy,null
.br
To tell the rawlist import module (which reads images from a list of files) the
colour space of the images.
.TP
.B \-y \fIvmod\fP[\fI,amod\fP]
video[,audio] export modules [null].  If omitted, transcode will encode to
the \fInull\fP module. A full-blown transcode installation has the following
export modules:
.TP 4
\fBac3\fP \- (video) null | (audio) ac3
.br
This module has no compile-time dependencies.
At run-time ffmpeg must be present.
Support for this module is good.
.RS 8
Lets you encode audio (raw PCM) to AC3 via the ffmpeg binary.
.RE
.TP 4
\fBaf6\fP \- (video) Win32 dll | (audio) MPEG/AC3/PCM
.br
At compile-time libavifile must be available.
At run-time libavifile and win32codecs must be present.
Support for this module is good.
.RS 8
Interface to the avifile library which allows the use of win32codec on the linux-x86 platform.
.RE
.TP 4
\fBdebugppm\fP \- (video) debugPPM/PGM | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Especially usefull when one want to try to find bugs in YUV mode. It encodes the three planes as seperate images. In RGB mode, the 3 color planes get encoded seperatly.
.RE
.TP 4
\fBdivx4\fP \- (video) DivX 4.xx | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time divx4linux (old) and libdivxencore.so must be present.
Support for this module is fair.
.RS 8
Encodes MPEG4 video using the closed-source binaries from divx.com to an AVI container.
.RE
.TP 4
\fBdivx4raw\fP \- (video) DivX 4.xx (ES) | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time divx4linux (old) and libdivxencore.so must be present.
Support for this module is fair.
.RS 8
Encodes MPEG4 video using the closed-source binaries from divx.com into no file container at all. It writes out the raw bitstream.
.RE
.TP 4
\fBdivx5\fP \- (video) DivX 5.xx | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time divx4linux (new) and libdivxencore.so must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the closed-source binaries from divx.com to an AVI container.
.RE
.TP 4
\fBdivx5raw\fP \- (video) DivX 5.xx (ES) | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time divx4linux (new) and libdivxencore.so must be present.
Support for this module is fair.
.RS 8
Encodes MPEG4 video using the closed-source binaries from divx.com into no file container at all. It writes out the raw bitstream.
.RE
.TP 4
\fBdv\fP \- (video) Digital Video | (audio) MPEG/AC3/PCM
.br
At compile-time libdv and libmp3lame must be available.
At run-time libdv must be present.
Support for this module is good.
.RS 8
Encodes DV into an AVI container. DV is a codec developed by Sony and is often used in digital camcorders.
.RE
.TP 4
\fBdvraw\fP \- (video) Digital Video | (audio) PCM
.br
At compile-time libdv must be available.
At run-time libdv must be present.
Support for this module is good.
.RS 8
Encodes DV into a DV file. DV is a codec developed by Sony and is often used in digital camcorders. A raw DV file can be played back into the camcorder.
.RE
.TP 4
\fBfame\fP \- (video) MPEG-4 | (audio) MPEG/AC3/PCM
.br
At compile-time libfame must be available.
This module has no run-time dependencies.
Support for this module is poor.
.RS 8
Fame is yet another MPEG4 encoder. It encodes to a raw file.
.RE
.TP 4
\fBffmpeg\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes many different formats to both AVI and raw. Supported are mpeg1video, mpeg2video, mpeg4, mjpeg, h263, h263p, wmv1, wmv2, rv10, msmpeg4, msmpeg4v2, huffyuv and dvvideo.
.RE
.TP 4
\fBim\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libImageMagick must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes image sequences by using the ImageMagick library. ImageMagick is able to handle a lot of different image formats among are png, jpg, miff, tiff, etc. Use -F to select the desired format.
.RE
.TP 4
\fBjpg\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libjpeg must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes jpg image sequences using libjpeg. Faster than ImageMagick. Use -F to select the compression quality.
.RE
.TP 4
\fBlame\fP \- (audio) MPEG 1/2
.br
At compile-time libmp3lame must be available.
At run-time lame and sox must be present.
Support for this module is good.
.RS 8
An audio-only encoder which drives the lame binary. The tool sox is used to do resampling if required. Encodes to a MP3 file.
.RE
.TP 4
\fBlzo\fP \- (video) LZO real-time compression | (audio) MPEG/AC3/PCM
.br
At compile-time liblzo and libmp3lame must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes video using a loss-less real-time LZO codec. This codec is a homegrown invention of transcode and is intended as an intermediate storage format. MPlayer can playback LZO-based AVI files as well. 
.RE
.TP 4
\fBmjpeg\fP \- (video) Motion JPEG | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame and libjpeg must be available.
This module has no run-time dependencies.
Support for this module is poor.
.RS 8
Encodes MJPEG based AVI files using a homegrown algorithm based on libjpeg. Using ffmpeg -F mjpeg for this task is a good idea.
.RE
.TP 4
\fBmov\fP \- (video) * | (audio) *
.br
At compile-time libquicktime must be available.
At run-time libquicktime must be present.
Support for this module is fair.
.RS 8
Interface to the quicktime library.
.RE
.TP 4
\fBmp1e\fP \- (video) MPEG1 video | (audio) MPEG1-Layer
.br
This module has no compile-time dependencies.
At run-time mp1e must be present.
Support for this module is good.
.RS 8
Drives the mp1e binary and writes an mpeg1 file to disc. It can also encode vcd compliant streams. Note: it writes an intermediate wav file for audio due to a limitation of mp1e.
.RE
.TP 4
\fBmp2enc\fP \- (audio) MPEG 1/2
.br
At compile-time mjpegtools must be available.
At run-time mp2enc must be present.
Support for this module is good.
.RS 8
Drives the mp2enc binary and writes an MP2 (MPEG1-Layer2) file. Useful for when encoding to SVCD to be multiplexed with mplex after encoding.
.RE
.TP 4
\fBmpeg\fP \- (video) MPEG 1/2 | (audio) MPEG 1 Layer II
.br
At compile-time nasm must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Interface to the bbmpeg library (included in transcode). It can encode generic mpeg1, VCD, SVCD, MPEG2 and DVD type video. Encoded video goes into a elementary file to be multiplexed with the corresponding audio file after encoding.
.RE
.TP 4
\fBmpeg2enc\fP \- (video) MPEG 1/2
.br
At compile-time mjpegtools must be available.
At run-time mpeg2enc must be present.
Support for this module is good.
.RS 8
Drives the mpeg2enc binary. mpeg2enc is a very feature rich MPEG encoder, have a look at its manpage. Encodes generic mpeg1, VCD, SVCD, MPEG2 and DVD type video.
.RE
.TP 4
\fBnet\fP \- (video) RGB/YUV | (audio) PCM/AC3
.br
At compile-time net-support must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Transfers video data over a network between various transcodes. Useful if you have multiple systems connected via a fast network.
.RE
.TP 4
\fBnull\fP \- (video) null | (audio) null
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Data sink. Does nothing else than discarding data.
.RE
.TP 4
\fBogg\fP \- (video) null | (audio) ogg
.br
This module has no compile-time dependencies.
At run-time oggenc must be present.
Support for this module is good.
.RS 8
Drives the oggenc binary. Encodes an Ogg/Vorbis file. Resamples.
.RE
.TP 4
\fBpcm\fP \- (audio) PCM (non-interleaved)
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Writes each audio channel to a WAVE PCM file.
.RE
.TP 4
\fBppm\fP \- (video) PPM/PGM | (audio) MPEG/AC3/PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Writes an image sequence of PGM or PPM files. PPM is an old format and there are several tools around to manipulate such files.
.RE
.TP 4
\fBpvm\fP \- (video) * | (audio) *
.br
At compile-time libpvm3 must be available.
At run-time pvm must be present.
Support for this module is good.
.RS 8
Meta module. It allows transcode to be used in a PVM cluster. See docs/export_pvm.txt
.RE
.TP 4
\fBraw\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Can write uncompressed streams to an AVI file as well as raw mpeg2 files in pass-through mode.
.RE
.TP 4
\fBtoolame\fP \- (audio) MPEG 1/2
.br
This module has no compile-time dependencies.
At run-time toolame and sox must be present.
Support for this module is good.
.RS 8
Drives the toolame binary to create MP2 audio tracks. Sox is used for resampling if requested.
.RE
.TP 4
\fBwav\fP \- (audio) WAVE PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Creates WAVE PCM files with interleaved audio for stereo.
.RE
.TP 4
\fBxvid2\fP \- (video) XviD 0.9.x (aka API 2.1 series)  | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time libxvidencore.so.2 must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the library available form xvid.org. Check out the library from xvidcvs using cvs -d :pserver:anonymous@cvs.xvid.org:/xvid co -rrelease-0_9_2 xvidcore. The output can either be an AVI file or a MPEG4 elementary stream (with -F raw).
.RE
.TP 4
\fBxvid3\fP \- (video) XviD nonumber series (aka API 3.0)  | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time libxvidcore.so.3 must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the library available form xvid.org. Check out the library from xvidcvs using cvs -d :pserver:anonymous@cvs.xvid.org:/xvid co -rHEAD xvidcore. The output can either be an AVI file or a MPEG4 elementary stream (with -F raw).
.RE
.TP 4
\fBxvid4\fP \- (video) XviD 1.0.x series (aka API 4.0) | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame must be available.
At run-time libxvidcore.so.4 must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the library available form xvid.org. Check out the library from xvidcvs using cvs -d :pserver:anonymous@cvs.xvid.org:/xvid co -rdev-api-4 xvidcore. There is also a tool available to create configuration files for this xvid version at http://zebra.fh-weingarten.de/transcode/xvid4conf. The output can either be an AVI file or a MPEG4 elementary stream (with -F raw).
.RE
.TP 4
\fByuv4mpeg\fP \- (video) YUV4MPEG2 | (audio) MPEG/AC3/PCM
.br
At compile-time mjpegtools must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Writes the uncompressed raw YUV data in a YUV4MPEG format as used by the lav* and mjpeg* tools.
.RE
.IP
To see what your transcode has, do a  
.br
.B ls -1 `tcmodinfo -p`/export*.so
.IP
It is possible to pass option strings to export modules like to filter modules.
The syntax is
.B  \-y vmod=options,amod=options
.TP
.B \-z
flip video frame upside down [off].
.TP
.B \-\-accel \fItype\fP
enforce experimental IA32 acceleration for type [autodetect]. \fItype\fP may be one of
.RS

 C          No acceleration
 ia32asm    plain x86 assembly

 mmx
 3dnow      Acceleration for a specific
 sse        SIMD extension.
 sse2
.RE
.TP
.B \-\-avi_limit \fIN\fP
split/rotate output AVI file after N MB [2048].
.TP
.B \-\-avi_comments \fIF\fP
Read AVI header comments from file \fIF\fP [off].
.br
The AVI file format supports so-called tomb-stone data. It can be
used to write annotations into the AVI file.

See the file \fBdocs/avi_comments.txt\fP for a sample input file with all tags.
When the file is read, empty lines and lines
starting with '#' are ignored. 
The syntax is: "TAG<space>STRING". The order of the tags does not
matter. If a tag has no string following it, it is ignored. That
means, you can use the file docs/avi_comments.txt as input and only fill out
the fields you want.

A very simple example is:
.nf
 ----------------snip----------------
 INAM My 1st Birthday
 ISBJ My first steps!
 IART My proud family
 ----------------snip----------------
.fi
Keep in mind that there is no endless space in the AVI header,
most likely its around 1000 bytes.
.TP
.B \-\-zoom_filter \fIstring\fP
use filter string for video resampling -Z [Lanczos3]
.br
The following filters are available:
.RS
.PP
   Bell
   Box
   Lanczos3 (default)
   Mitchell
   Hermite
   B_spline
   Triangle
.RE
.TP
.B \-\-cluster_percentage
use percentage mode for cluster encoding -W [off]
.TP
.B \-\-cluster_chunks \fIa-b\fP
process chunk range instead of selected chunk [off]
.TP
.B \-\-export_asr \fIC\fP
set export aspect ratio code \fIC\fP [as input]
.RS
.PP
Valid codes for \fIC\fP are:
     1        1:1
     2        4:3
     3       16:9
     4     2.21:1
.RE
.TP
.B \-\-import_asr \fIC\fP
set import aspect ratio code \fIC\fP [autoprobed]
.RS
.PP
Valid codes for \fIC\fP are:
     1        1:1
     2        4:3
     3       16:9
     4     2.21:1
.RE
.TP
.B \-\-ext \fIvid\fP,\fIaud\fP
Use these file extensions [.avi,.mp3]
.br
When this option is not given, transcode will use a file extension dependend on the export module. For the mpeg export modules  this is ".m2v" resp ".m1v" and ".mpa" for audio.
.br
To clean up this mess, the option --ext was introduced without breaking exising
behaviour. Use \fB--ext \fP\fInone\fP,\fInone\fP to disable filename extension. 
.TP
.B \-\-keep_asr
try to keep aspect ratio (only with -Z) [off]
.RS
.PP
The \fB\-\-keep_asr\fP options changes the meaning of \fB-Z\fP. It tries to
fit the video into a framesize specified by \fB-Z\fP by keeping the
\fIoriginal\fP aspect ratio. 
.nf
/----------------\\                            /---480-----\\
|                |                            | black     |
|720x306 = 2.35:1| -> -Z 480x480 --keep_asr ->|-----------4
|                |                            | 480x204   8
\\----------------/                            |-----------0
                                              | black     |
                                              \\-----------/
.fi
Consider \fB--keep_asr\fP a wrapper for calculating \fB-Y\fP options and 
\fB-Z\fP options
.RE
.TP
.B \-\-divx_quant \fImin,max\fP
divx encoder min/max quantizer [2,31]
.TP
.B \-\-divx_rc \fIp\fP,\fIrp\fP,\fIrr\fP
divx encoder rate control parameter [2000,10,20]
.TP
.B \-\-divx_vbv_prof \fIN\fP
divx5 encoder VBV profile (0=free-5=hiqhq) [3]
.br
Sets a predefined profile for the Video Bitrate Verifier. If \fIN\fP is set to
zero, no profile is applied and the user specified values from
\fB\-\-divx_vbv\fP are used. Valid profiles are:
.RS
.TP 4
.I 0
Free/No profile  (Use supplied values)
.TP
.I 1
Handheld         (  320,  16,  3072)
.TP
.I 2
Portable         ( 1920,  64, 12288)
.TP
.I 3
Home Theatre     (10000, 192, 36864)
.TP
.I 4
High Definition  (20000, 384, 73728)
.RE
.TP
.B \-\-divx_vbv \fIbr\fP,\fIsz\fP,\fIoc\fP
divx5 encoder VBV params (bitrate,size,occup.) [10000,192,36864]
.br
These parameters are normally set through the profile parameter
\fB\-\-divx_vbv_prof\fP. Do not mess with theses value unless you are absolutely
sure of what you are doing. Transcode internally multiplicates vbv_bitrate with
400, vbv_size with 16384 and vbv_occupancy with 64 to ensure the supplied
values are multiples of what the encoder library wants.
.TP
.B \-\-export_fps \fIrate\fP[,\fIfrc\fP]
set export frame rate (and code) [as input].Valid values
for \fIfrc\fP are
.RS

\	frc\	:\	rate
.br
\	\ 1\	:\	23.976 (24000/1001.0)
.br
\	\ 2\	:\	24
.br
\	\ 3\	:\	25
.br
\	\ 4\	:\	29.970 (30000/1001.0)
.br
\	\ 5\	:\	30
.br
\	\ 6\	:\	50
.br
\	\ 7\	:\	59.940 (2 * 29.970)
.br
\	\ 8\	:\	60
.br
\	\ 9\	:\	\ 1
.br
\	10\	:\	\ 5
.br
\	11\	:\	10
.br
\	12\	:\	12
.br
\	13\	:\	15
.RE
.TP
.B \-\-export_frc \fIF\fP
set export frame rate code \fIF\fP [as input]
.br
obsolete, use --export_fps 0,F
.TP
.B \-\-hard_fps
disable smooth dropping (for variable fps clips) [off]
.br
see /docs/framerate.txt for more information.
.TP
.B \-\-uyvy
use UYVY (4:2:2) as internal video codec [off]
.br
This is an experimental feature and a developers playground. Not many import,
export and filter modules support this colorspace. A 4:2:2 colorspace offers
much more quality than the consumer oriented 4:2:0 colorspaces like YV12/I420.
Most equipment in film and video post-production uses UYVY. UYVY doubles the
precision for chroma (color difference) information in the image.
.IP
All internal transformations are supported in UYVY mode (clipping, flipping,
zooming, etc). 
.TP
.B \-\-import_v4l \fIn\fP[,\fIid\fP]
channel number and station number or name [0]
.TP
.B \-\-record_v4l \fIa-b\fP
recording time interval in seconds [off]
.br
obsolete, use -c a-b.
.TP
.B \-\-duration \fIhh:mm:ss\fP
limit v4l recording to this duration [off]
.br
obsolete, use -c 0-hh:mm:ss.
.TP
.B \-\-pulldown
set MPEG 3:2 pulldown flags on export [off]
.TP
.B \-\-antialias_para \fIw,b\fP
center pixel weight, xy-bias [0.333,0.500]
.TP
.B \-\-no_audio_adjust
disable internal audio frame sample adjustment [off]
.TP
.B \-\-no_bitreservoir
disable lame bitreservoir for MP3 encoding [off]
.TP
.B \-\-config_dir \fIdir\fP
Assume config files are in this \fIdir\fP
.br
This only affects the -y ffmpeg and all -y xvid234 modules. It gives the path
where the modules search for their configuration.
.TP
.B \-\-lame_preset \fIname\fP[\fI,fast\fP]
use lame preset with \fIname\fP. [off]
.br
Lame features some built-in presets. Those presets are designed to provide the
highest possible quality.
They have for the most part been subject to and tuned via rigorous listening
tests to verify and achieve this objective. These are continually updated to
coincide with the latest developments that occur and as a result should provide
you with nearly the best quality currently possible from LAME.
.br
Any of those VBR presets can also be used in fast mode,
using the new vbr algorithm. This mode is faster, but its
quality could be a little lower. To enable the fast mode,
append "\fI,fast\fP"
.PP
.RS 
.TP 13
.I <N kbps>
Using this preset will usually give you good quality at a specified bitrate.
Depending on the bitrate entered, this preset will determine the optimal
settings for that particular situation. While this approach works, it is not
nearly as flexible as VBR, and usually will not reach the same quality level as
VBR at higher bitrates. ABR. 
.TP 
.I medium
This preset should provide near transparency to most people on most music. The
resulting bitrate should be in the 150-180kbps range, according to music
complexity. VBR.
.TP
.I standard
This preset should generally be transparent to most people on most music and is
already quite high in quality.  The resulting bitrate should be in the
170-210kbps range, according to music complexity. VBR.
.TP 
.I extreme
If you have extremely good hearing and similar equipment, this preset will
provide slightly higher quality than the "standard" mode.  The resulting
bitrate should be in the 200-240kbps range, according to music complexity. VBR.
.TP
.I insane
This preset will usually be overkill for most people and most situations, but
if you must have the absolute highest quality with no regard to filesize, this
is the way to go. This preset is the highest preset quality available.  320kbps
CBR.
.TP
(taken from http://www.mp3dev.org/mp3/doc/html/presets.html)
.RE
.TP
.B \-\-av_fine_ms \fIt\fP
AV fine-tuning shift \fIt\fP in millisecs [autodetect]
.br
also see -D.
.TP
.B \-\-nav_seek \fIfile\fP
use VOB or AVI navigation file [off].
.br
Generate a nav file with tcdemux -W >nav_log for VOB files or with aviindex(1)
for AVI files.
.TP
.B \-\-psu_mode
process VOB in PSU, -o is a filemask incl. %d [off]. PSU means Program
Stream Unit and this mode is useful for (mostly) NTSC DVDs which have
several program stream units.
.TP
.B \-\-psu_chunks \fIa-b\fP
process only selected units \fIa-b\fP for PSU mode [all]
.TP
.B \-\-no_split
encode to single file in chapter/psu/directory mode [off]
.br
If you don't give this option, you'll end up with several files in one of the
above mentioned modes. It is still possible to merge them with avimerge(1).
.TP
.B \-\-pre_clip t[,l[,b[,r]]]
select initial frame region by clipping border [off]
.TP
.B \-\-post_clip t[,l[,b[,r]]]
select final frame region by clipping border [off]
.TP
.B \-\-a52_drc_off
disable liba52 dynamic range compression [enabled]
.br
If you dont specify this option, liba52 will provide the default behaviour, which is to
apply the full dynamic range compression as specified in the A/52 stream. This
basically makes the loud sounds softer, and the soft sounds louder, so you can
more easily listen to the stream in a noisy environment without disturbing
anyone.

If you let it enabled this this will totally disable the dynamic range
compression and provide a playback more adapted to a movie theater or a
listening room.
.TP
.B \-\-a52_demux
demux AC3/A52 to separate channels [off]
.TP
.B \-\-a52_dolby_off
disable liba52 dolby surround [enabled]
.br
selects whether the output is plain stereo (if the option is set) or if                               
it is Dolby Pro Logic - also called Dolby surround or 3:1 - downmix (if                               
the option is not used).
.TP
.B \-\-dir_mode \fIbase\fP
process directory contents to base-%03d.avi [off]
.TP
.B \-\-frame_interval \fIN\fP
select only every \fIN\fPth frame to be exported [1]
.TP
.B \-\-encode_fields \fIC\fP
enable field based encoding (if supported) [off]
.br
This option takes an argument if given to denote the order of fields. If the
option is not given, it defaults to progressive (do not assume the picture is
interlaced)
.RS
.IP
Valid codes for \fIC\fP are:
.TP 4
.I p
progressive (default)
.TP
.I t
top-field first
.TP
.I b
bottom-field first
.RE
.TP
.B \-\-dv_yuy2_mode
decoded Digital Video (raw) YUV frame is in YUY2 (packet) format using libdv. Downsample frame to YV12. PAL users should compile libdv with --with-pal-yuv=YV12 to avoid this option [off]
.TP
.B \-\-write_pid \fIfile\fP
write pid of signal thread to \fIfile\fP [off]
Enables you to terminate transcode cleanly by sending a SIGINT (2) to the pid
in \fIfile\fP. Please note \fIfile\fP will be overwritten. Usage example
.RS 8

.nf
$ transcode ... \-\-write_pid /tmp/transcode.pid &
$ kill -2 `cat /tmp/transcode.pid`
.fi
.RE
.TP
.B \-\-nice \fIN\fP
set niceness to \fIN\fP [off]
.br
The option \-\-nice which renices transcode to the given positive or
negative value. \-10 sets a high priority; +10 a low priority.
This might be useful for cluster mode.
.TP
.B \-\-progress_off
disable progress meter status line [off]
.TP
.B \-\-color \fIN\fP
level of color in transcodes output [1]
.br 
Colorful output can be disabled by setting \fIN\fP to \fI0\fP. It will be 
automatically disabled if the output of transcode is a file or a pipe.
.TP
.B \-\-print_status \fIN\fP[,\fIusecr\fP]
print status every \fIN\fP frames / use CR or NL [1,1]
.br
The first parameter controls how frequently the status message is printed                 
(every \fIN\fP frames), the second parameter (if provided) controls whether transcode           
ends the line with a CR ('\\r') or NL ('\\n') character.  Transcode defaults to             
ending with a CR if its output is going to a terminal, or a LF if its output is           
going to somewhere else (such as a logfile), so most people shouldn't have any            
need to specify the second parameter since it should do the right thing most of           
the time.
.TP
.B \-\-socket \fIFILE\fP
Open a socket to accept commands while running. See \fBtcmodinfo(1)\fP and
/docs/filter-socket.txt for more information about the protocol.
.TP
.B \-\-more_help \fIparam\fP
more help on named parameter (if supported)

.SH FILTERS
The syntax for filter options is simple. A filter is specified with
.RS 8
\-J filter=\fIoptionstring\fP
.RE
The optionstring can contain multiple options which are separated by colons \`:\'
.RS 8
\-J filter=\fIoption1\fP:\fIoption2\fP:\fIoption3\fP
.RE
An option can have an argument or non (bool). For options with an argument, the
format in which the argument has to be given to the option is specified in a
printf(1) like string. The most common case is `%d' which simply means a number. The argument has to be seperated from the option by a \`=\'.
.RS 8
\-J filter=\fIbool1\fP:\fIoption1\fP=\fI15\fP:\fIoption2\fP=\fI20x30\fP
.RE
Most filters try to do the right thing with the default options. You should
play with various parameters if you are not satisfied with the default
behaviour. If you have no idea what a filter does, its very likely that you
don't need it.

If a filter takes (for eg.) a filename as an argument, make sure that the filename
does not contain a `:' or a `='. Its a limitation of the parser. A comma `,' is
possible but must be extra quoted. For the text filter that is
.RS 8
\-J text=string="Hello\\, World"
.RE
\" Here starts the generated part, produced by make-filter-man.sh
.TP 4
\fB29to23\fP - \fBframe rate conversion filter (interpolating 29 to 23)\fP
\fB29to23\fP was written by Max Alekseyev, Tilmann Bitterberg. The version documented here is v0.3 (2003-07-18). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.TP 4
\fB32detect\fP - \fB3:2 pulldown / interlace detection plugin\fP
\fB32detect\fP was written by Thomas. The version documented here is v0.2.4 (2003-07-22). This is a video filter. It can handle RGB and YUV mode. It supports multiple instances and can run as a pre-processing and/or as a post-processing filter.
.IP
.RS
\(bu 
.I threshold 
= \fI%d\fP  [default \fI9\fP] 
.RS 3
Interlace detection threshold
.RE
\(bu 
.I chromathres 
= \fI%d\fP  [default \fI4\fP] 
.RS 3
Interlace detection chroma threshold
.RE
\(bu 
.I equal 
= \fI%d\fP  [default \fI10\fP] 
.RS 3
threshold for equal colors
.RE
\(bu 
.I chromaeq 
= \fI%d\fP  [default \fI5\fP] 
.RS 3
threshold for equal chroma
.RE
\(bu 
.I diff 
= \fI%d\fP  [default \fI30\fP] 
.RS 3
threshold for different colors
.RE
\(bu 
.I chromadi 
= \fI%d\fP  [default \fI15\fP] 
.RS 3
threshold for different chroma
.RE
\(bu 
.I force_mode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
set internal force de-interlace flag with mode -I N
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
run as pre filter
.RE
\(bu 
.I verbose 
(bool) 
.RS 3
show results
.RE
.IP
This filter checks for interlaced video frames.
Subsequent de-interlacing with transcode can be enforced with 'force_mode' option
.RE
.TP 4
\fB32drop\fP - \fB3:2 inverse telecine removal plugin\fP
\fB32drop\fP was written by Thomas Oestreich. The version documented here is v0.4 (2003-02-01). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.TP 4
\fBaclip\fP - \fBgenerate audio clips from source\fP
\fBaclip\fP was written by Thomas Oestreich. The version documented here is v0.1.1 (2003-09-04). This is a audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I level 
= \fI%d\fP  [default \fI10\fP] 
.RS 3
The audio must be under this level to be skipped
.RE
\(bu 
.I range 
= \fI%d\fP  [default \fI25\fP] 
.RS 3
Number of samples over level will be keyframes
.RE
.RE
.TP 4
\fBastat\fP - \fBaudio statistics filter plugin\fP
\fBastat\fP was written by Thomas Oestreich. The version documented here is v0.1.3 (2003-09-04). This is a audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I file 
= \fI%s\fP
.RS 3
File to save the calculated volume rescale number to
.RE
.RE
.TP 4
\fBcompare\fP - \fBcompare with other image to find a pattern\fP
\fBcompare\fP was written by Antonio Beamud. The version documented here is v0.1.2 (2003-08-29). This is a video filter. It can handle RGB and YUV mode. It supports multiple instances. It is a post-processing only filter.
.IP
.RS
\(bu 
.I pattern 
= \fI%s\fP
.RS 3
Pattern image file path
.RE
\(bu 
.I results 
= \fI%s\fP
.RS 3
Results file path
.RE
\(bu 
.I delta 
= \fI%f\fP  [default \fI45.000000\fP] 
.RS 3
Delta error
.RE
.IP
Generate a file in with information about the times, frame, etc the pattern
defined in the image parameter is observed.
.RE
.TP 4
\fBcontrol\fP - \fBapply a filter control list\fP
\fBcontrol\fP was written by Tilmann Bitterberg. The version documented here is v0.0.1 (2003-11-29). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I file 
= \fI%s\fP
.RS 3
read commands to apply from file.
.RE
\(bu 
.I ofile 
= \fI%s\fP
.RS 3
write output of commands to output file
.RE
.IP
The format of the command file is framenumber followed by at least one whitespace followed
by the command followed by at least one whitespace followed by arguments for the command.
Empty lines and lines starting with a `#' are ignored. The frame numbers must be sorted ascending.

      # Example file
      # At frame 10 load the smooth filter
      10 load smooth
      # reconfigure at 20
      20 configure smooth=strength=0.9
      99 disable smooth

.RE
.TP 4
\fBcpaudio\fP - \fBcopy one audio channel to the other channel filter plugin\fP
\fBcpaudio\fP was written by William H Wittig. The version documented here is v0.1 (2003-04-30). This is a audio filter. It is a post-processing only filter.
.IP
.RS
\(bu 
.I source 
= \fI%c\fP  [default \fIl\fP] 
.RS 3
Source channel (l=left, r=right)
.RE
.IP
Copies audio from one channel to another
.RE
.TP 4
\fBcshift\fP - \fBchroma-lag shifter\fP
\fBcshift\fP was written by Thomas Östreich, Chad Page. The version documented here is v0.2.1 (2003-01-21). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I shift 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Shift chroma(color) to the left
.RE
.RE
.TP 4
\fBcut\fP - \fBencode only listed frames\fP
\fBcut\fP was written by Thomas Oestreich. The version documented here is v0.1.0 (2003-05-03). This is a video and audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I HH:MM:SS.f-HH:MM:SS.f/step 
= \fI%s\fP
.RS 3
apply filter [start-end] frames [0-oo/1]
.RE
.RE
.TP 4
\fBdecimate\fP - \fBNTSC decimation plugin\fP
\fBdecimate\fP was written by Thanassis Tsiodras. The version documented here is v0.4 (2003-04-22). This is a video filter. It can handle YUV mode only. It is a post-processing only filter.
.IP
.RS
\(bu 
.I verbose 
(bool) 
.RS 3
print verbose information
.RE
.IP
see /docs/README.Inverse.Telecine.txt
.RE
.TP 4
\fBdenoise3d\fP - \fBHigh speed 3D Denoiser\fP
\fBdenoise3d\fP was written by Daniel Moreno & A'rpi. The version documented here is v1.0.3 (2003-11-08). This is a video filter. It can handle YUV mode only. It supports multiple instances. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I luma 
= \fI%f\fP  [default \fI4.000000\fP] 
.RS 3
spatial luma strength
.RE
\(bu 
.I chroma 
= \fI%f\fP  [default \fI3.000000\fP] 
.RS 3
spatial chroma strength
.RE
\(bu 
.I luma_strength 
= \fI%f\fP  [default \fI6.000000\fP] 
.RS 3
temporal luma strength
.RE
\(bu 
.I chroma_strength 
= \fI%f\fP  [default \fI8.000000\fP] 
.RS 3
temporal chroma strength
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
run as a pre filter
.RE
.IP
What:
The denoise3d filter from mplayer (sibling of hqdn3d). Works very crude and
simple but also very fast. In fact it is even faster than the original from
mplayer as I managed to tweak some things (a.o. zero frame copying).

Who:
Everyone who wants to have their captured frames thoroughly denoised (i.e. who
want to encode to mpeg or mjpeg) but do not have enough processing power to
real-time encode AND use hqdn3d (better quality but a lot slower) or dnr (yet
slower), not to mention the other denoisers that are even slower. Quality is
really good for static scenes (if fed with the right parameters), moving
objects may show a little ghost-image (also depends on parameters) though. Your
milage may vary.

How:
Parameters are the same as the hqdn3d module, although in practice you'll not
end up with exactly the same values. Just experiment.  Particular for this
version of the filter is that if you supply -1 to either component's parameters
(luma/chroma), that component will not have the filter applied to. If you're
still short on CPU cycles, try disabling the luma filter, this will not make
much difference in the effectiveness of the filter!
.RE
.TP 4
\fBdetectsilence\fP - \fBaudio silence detection with tcmp3cut commandline generation\fP
\fBdetectsilence\fP was written by Tilmann Bitterberg. The version documented here is v0.0.1 (2003-07-26). This is a audio filter. It is a pre-processing only filter.
.TP 4
\fBdetectclipping\fP - \fBdetect clipping parameters (-j or -Y)\fP
\fBdetectclipping\fP was written by Tilmann Bitterberg, A'rpi. The version documented here is v0.1.0 (2003-11-01). This is a video filter. It can handle RGB and YUV mode. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I range 
= \fI%u-%u/%d\fP  [default \fI0-4294967295/1\fP] 
.RS 3
apply filter to [start-end]/step frames
.RE
\(bu 
.I limit 
= \fI%d\fP  [default \fI24\fP] 
.RS 3
the sum of a line must be below this limit to be considered as black
.RE
\(bu 
.I post 
(bool) 
.RS 3
run as a POST filter (calc -Y instead of the default -j)
.RE
.IP
Detect black regions on top, bottom, left and right of an image.  It is suggested that the filter is run for around 100 frames.  It will print its detected parameters every frame. If you don't notice any change in the printout for a while, the filter probably won't find any other values.  The filter converges, meaning it will learn.
.RE
.RE
.TP 4
\fBdilyuvmmx\fP - \fByuv de-interlace filter plugin\fP
\fBdilyuvmmx\fP was written by Thomas Oestreich. The version documented here is v0.1.1 (2002-02-21). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.TP 4
\fBdivxkey\fP - \fBcheck for DivX 4.xx / OpenDivX / DivX;-) keyframe\fP
\fBdivxkey\fP was written by Thomas Oestreich. The version documented here is v0.1 (2002-01-15). This is a video filter. It is a pre-processing only filter.
.TP 4
\fBdnr\fP - \fBdynamic noise reduction\fP
\fBdnr\fP was written by Gerhard Monzel. The version documented here is v0.2 (2003-01-21). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I lt 
= \fI%d\fP  [default \fI10\fP] 
.RS 3
Threshold to blend luma/red
.RE
\(bu 
.I ll 
= \fI%d\fP  [default \fI4\fP] 
.RS 3
Threshold to lock luma/red
.RE
\(bu 
.I ct 
= \fI%d\fP  [default \fI16\fP] 
.RS 3
Threshold to blend croma/green+blue
.RE
\(bu 
.I cl 
= \fI%d\fP  [default \fI8\fP] 
.RS 3
Threshold to lock croma/green+blue
.RE
\(bu 
.I sc 
= \fI%d\fP  [default \fI30\fP] 
.RS 3
Percentage of picture difference (scene change)
.RE
.IP
see /docs/filter_dnr.txt (german only)
.RE
.TP 4
\fBdoublefps\fP - \fBdouble frame rate by creating frames from fields\fP
\fBdoublefps\fP was written by Tilmann Bitterberg. The version documented here is v0.2 (2003-06-23). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I shiftEven 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Assume even field dominance
.RE
.RE
.TP 4
\fBextsub\fP - \fBDVD subtitle overlay plugin\fP
\fBextsub\fP was written by Thomas Oestreich. The version documented here is 0.3.5 (2003-10-15). This is a video filter. It can handle RGB and YUV mode. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I track 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Subtitle track to render
.RE
\(bu 
.I vertshift 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
offset of subtitle with respect to bottom of frame in rows
.RE
\(bu 
.I timeshift 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
global display start time correction in msec
.RE
\(bu 
.I antialias 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
anti-aliasing the rendered text (0=off,1=on)
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Run as a pre filter
.RE
\(bu 
.I color1 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Make a subtitle color visible with given intensity
.RE
\(bu 
.I color2 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Make a subtitle color visible with given intensity
.RE
\(bu 
.I ca 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Shuffle the color assignment by choosing another subtitle color
.RE
\(bu 
.I cb 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Shuffle the color assignment by choosing another subtitle color
.RE
.RE
.TP 4
\fBfields\fP - \fBField adjustment plugin\fP
\fBfields\fP was written by Alex Stewart. The version documented here is v0.1.1 (2003-01-21). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I flip 
(bool) 
.RS 3
Exchange the top field and bottom field of each frame
.RE
\(bu 
.I shift 
(bool) 
.RS 3
Shift the video by one field
.RE
\(bu 
.I flip_first 
(bool) 
.RS 3
Normally shifting is performed before flipping, this option reverses that
.RE
.IP
The 'fields' filter is designed to shift, reorder, and
generally rearrange independent fields of an interlaced
video input.  Input retrieved from broadcast (PAL, NTSC,
etc) video sources generally comes in an interlaced form
where each pass from top to bottom of the screen displays
every other scanline, and then the next pass displays the
lines between the lines from the first pass.  Each pass is
known as a "field" (there are generally two fields per
frame).  When this form of video is captured and manipulated
digitally, the two fields of each frame are usually merged
together into one flat (planar) image per frame.  This
usually produces reasonable results, however there are
conditions which can cause this merging to be performed
incorrectly or less-than-optimally, which is where this
filter can help.

The following options are supported for this filter
(they can be separated by colons):

  shift - Shift the video by one field (half a frame),
          changing frame boundaries appropriately.  This is
          useful if a video capture started grabbing video
          half a frame (one field) off from where frame
          boundaries were actually intended to be.

  flip  - Exchange the top field and bottom field of each
          frame.  This can be useful if the video signal was
          sent "bottom field first" (which can happen
          sometimes with PAL video sources) or other
          oddities occurred which caused the frame
          boundaries to be at the right place, but the
          scanlines to be swapped.

  flip_first
        - Normally shifting is performed before flipping if
          both are specified.  This option reverses that
          behavior.  You should not normally need to use
          this unless you have some extremely odd input
          material, it is here mainly for completeness.

  help  - Print this text.

Note: the 'shift' function may produce slight color
discrepancies if YV12 is used as the internal transcode
video format (-V flag).  This is because YV12 does not
contain enough information to do field shifting cleanly. For
best (but slower) results, use RGB mode for field shifting.
.RE
.TP 4
\fBfps\fP - \fBconvert video frame rate, gets defaults from -f and --export_fps\fP
\fBfps\fP was written by Christopher Cramer. The version documented here is v0.2 (2003-08-10). This is a video filter. It can handle RGB and YUV mode. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
.IP
options: <input fps>:<output fps>
example: -J fps=25:29.97 will convert from PAL to NTSC
If no options are given, defaults or -f/--export_fps/--export_frc will be used.
.RE
.TP 4
\fBhqdn3d\fP - \fBHigh Quality 3D Denoiser\fP
\fBhqdn3d\fP was written by Daniel Moreno & A'rpi. The version documented here is v1.0.2 (2003-08-15). This is a video filter. It can handle YUV mode only. It supports multiple instances. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I luma 
= \fI%f\fP  [default \fI4.000000\fP] 
.RS 3
spatial luma strength
.RE
\(bu 
.I chroma 
= \fI%f\fP  [default \fI3.000000\fP] 
.RS 3
spatial chroma strength
.RE
\(bu 
.I luma_strength 
= \fI%f\fP  [default \fI6.000000\fP] 
.RS 3
temporal luma strength
.RE
\(bu 
.I chroma_strength 
= \fI%f\fP  [default \fI4.500000\fP] 
.RS 3
temporal chroma strength
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
run as a pre filter
.RE
.IP
This filter aims to reduce image noise producing smooth images and making still images really still (This should enhance compressibility).
.RE
.TP 4
\fBinvert\fP - \fBinvert the image\fP
\fBinvert\fP was written by Tilmann Bitterberg. The version documented here is v0.1.4 (2003-10-12). This is a video filter. It can handle RGB,YUV and YUV422 mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I range 
= \fI%u-%u/%d\fP  [default \fI0-4294967295/1\fP] 
.RS 3
apply filter to [start-end]/step frames
.RE
.RE
.TP 4
\fBivtc\fP - \fBNTSC inverse telecine plugin\fP
\fBivtc\fP was written by Thanassis Tsiodras. The version documented here is v0.4 (2003-04-22). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I verbose 
(bool) 
.RS 3
print verbose information
.RE
.IP
see /docs/README.Inverse.Telecine.txt
.RE
.TP 4
\fBlogo\fP - \fBrender image in videostream\fP
\fBlogo\fP was written by Tilmann Bitterberg. The version documented here is v0.9 (2003-04-09). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I file 
= \fI%s\fP
.RS 3
Image filename
.RE
\(bu 
.I posdef 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Position (0=None, 1=TopL, 2=TopR, 3=BotL, 4=BotR, 5=Center)
.RE
\(bu 
.I pos 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Position (0-width x 0-height)
.RE
\(bu 
.I range 
= \fI%u-%u\fP  [default \fI0-0\fP] 
.RS 3
Restrict rendering to framerange
.RE
\(bu 
.I ignoredelay 
(bool) 
.RS 3
Ignore delay specified in animations
.RE
\(bu 
.I rgbswap 
(bool) 
.RS 3
Swap red/blue colors
.RE
\(bu 
.I grayout 
(bool) 
.RS 3
YUV only: don't write Cb and Cr, makes a nice effect
.RE
\(bu 
.I flip 
(bool) 
.RS 3
Mirror image
.RE
.IP
This filter renders an user specified image into the video.
Any image format ImageMagick can read is accepted.
Transparent images are also supported.
Image origin is at the very top left.

see /docs/filter_logo.txt
.RE
.TP 4
\fBlogoaway\fP - \fBremove an image from the video\fP
\fBlogoaway\fP was written by Thomas Wehrspann <thomas@wehrspann.de>. The version documented here is v0.4 (2003-09-03). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter. It supports multiple instances.
.IP
.RS
\(bu 
.I range 
= \fI%d-%d\fP  [default \fI0-4294967295\fP] 
.RS 3
Frame Range
.RE
\(bu 
.I pos 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Position of logo
.RE
\(bu 
.I size 
= \fI%dx%d\fP  [default \fI10x10\fP] 
.RS 3
Size of logo
.RE
\(bu 
.I mode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Filter Mode (0=none,1=solid,2=xy,3=shape)
.RE
\(bu 
.I border 
(bool) 
.RS 3
Visible Border
.RE
\(bu 
.I xweight 
= \fI%d\fP  [default \fI50\fP] 
.RS 3
X-Y Weight(0%-100%)
.RE
\(bu 
.I fill 
= \fI%2x%2x%2x\fP  [default \fI000\fP] 
.RS 3
Solid Fill Color(RGB)
.RE
\(bu 
.I file 
= \fI%s\fP
.RS 3
Image with alpha/shape information
.RE
.IP
This filter removes an image in a user specified area from the video.  You can
choose from different methods.                                

see /docs/filter_logoaway.txt
.RE
.TP 4
\fBlowpass\fP - \fBHigh and low pass filter\fP
\fBlowpass\fP was written by Tilmann Bitterberg. The version documented here is v0.1.0 (2002-02-26). This is a audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I taps 
= \fI%d\fP  [default \fI30\fP] 
.RS 3
strength (may be negative)
.RE
.RE
.TP 4
\fBmask\fP - \fBFilter through a rectangular Mask\fP
\fBmask\fP was written by Thomas Östreich, Chad Page. The version documented here is v0.2.3 (2003-10-12). This is a video filter. It can handle RGB,YUV and YUV422 mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I lefttop 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Upper left corner of the box
.RE
\(bu 
.I rightbot 
= \fI%dx%d\fP  [default \fI32x32\fP] 
.RS 3
Lower right corner of the box
.RE
.IP
This filter applies an rectangular mask to the video.  Everything outside the mask is set to black.
.RE
.TP 4
\fBmodfps\fP - \fBplugin to modify framerate\fP
\fBmodfps\fP was written by Marrq. The version documented here is v0.10 (2003-08-18). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I mode 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
mode of operation
.RE
\(bu 
.I infps 
= \fI%f\fP  [default \fI25.000000\fP] 
.RS 3
Original fps
.RE
\(bu 
.I infrc 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Original frc
.RE
\(bu 
.I examine 
= \fI%d\fP  [default \fI5\fP] 
.RS 3
How many frames to buffer
.RE
\(bu 
.I subsample 
= \fI%d\fP  [default \fI32\fP] 
.RS 3
How many pixels to subsample
.RE
\(bu 
.I clonetype 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
How to clone frames
.RE
\(bu 
.I verbose 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
run in verbose mode
.RE
.IP
This filter aims to allow transcode to alter the fps
of video.  While one can reduce the fps to any amount,
one can only increase the fps to at most twice the
original fps.

There are two modes of operation, buffered and unbuffered,
unbuffered is quick, but buffered, especially when dropping frames
should look better.

For most users, modfps will need either no options, or just mode=1

see /docs/README.filter.modfps
.RE
.TP 4
\fBmsharpen\fP - \fBVirtualDub's MSharpen Filter\fP
\fBmsharpen\fP was written by Donald Graft, William Hawkins. The version documented here is (1.0) (2003-07-17). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I strength 
= \fI%d\fP  [default \fI100\fP] 
.RS 3
How much  of the effect
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI10\fP] 
.RS 3
How close a pixel must be to the brightest or dimmest pixel to be mapped
.RE
\(bu 
.I highq 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Tradeoff speed for quality of detail detection
.RE
\(bu 
.I mask 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Areas to be sharpened are shown in white
.RE
.IP
This plugin implements an unusual concept in spatial sharpening.
Although designed specifically for anime, it also works well with
normal video. The filter is very effective at sharpening important
edges without amplifying noise.

  * Strength 'strength' (0-255) [100]
    This is the strength of the sharpening to be applied to the edge detail areas. It is applied only to the edge detail areas as determined by the 'threshold' parameter. Strength 255 is the strongest sharpening.
  * Threshold 'threshold' (0-255) [10]
    This parameter determines what is detected as edge detail and thus sharpened. To see what edge detail areas will be sharpened, use the 'mask' parameter.
  * Mask 'mask' (0-1) [0]
    When set to true, the areas to be sharpened are shown in white against a black background. Use this to set the level of detail to be sharpened. This function also makes a basic edge detection filter.
  * HighQ 'highq' (0-1) [1]
    This parameter lets you tradeoff speed for quality of detail detection. Set it to true for the best detail detection. Set it to false for maximum speed.
.RE
.TP 4
\fBnored\fP - \fBnored the image\fP
\fBnored\fP was written by Tilmann Bitterberg. The version documented here is v0.1.3 (2003-01-26). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I range 
= \fI%u-%u/%d\fP  [default \fI0x4294967295/1\fP] 
.RS 3
apply filter to [start-end]/step frames
.RE
\(bu 
.I subst 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
substract N red from Cr
.RE
.RE
.TP 4
\fBnormalize\fP - \fBVolume normalizer\fP
\fBnormalize\fP was written by pl, Tilmann Bitterberg. The version documented here is v0.1.1 (2002-06-18). This is a audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I smooth 
= \fI%f\fP  [default \fI0.06\fP] 
.RS 3
Value for smoothing ]0.0 1.0[
.RE
\(bu 
.I smoothlast 
= \fI%f\fP  [default \fI0.06\fP] 
.RS 3
Value for smoothing last sample ]0.0, 1.0[
.RE
\(bu 
.I algo 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Algorithm to use (1 or 2). 1=uses a 1 value memory and coefficients new=a*old+b*cur (with a+b=1).   2=uses several samples to smooth the variations (standard weighted mean on past samples)
.RE
.RE
.TP 4
\fBnull\fP - \fBdemo filter plugin; does nothing\fP
\fBnull\fP was written by Thomas Oestreich. The version documented here is v0.2 (2003-09-04). This is a video and audio filter. It can be used as a pre-processing or as a post-processing filter.
.TP 4
\fBpp\fP - \fBMplayers postprocess filters\fP
\fBpp\fP was written by Michael Niedermayer et al, Gerhard Monzel. The version documented here is v1.2.4 (2003-01-24). This is a video filter. It can handle YUV mode only. It supports multiple instances. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I hb 
= \fI%d:%d\fP  [default \fI64:40\fP] 
.RS 3
Horizontal deblocking filter
.RE
\(bu 
.I vb 
= \fI%d:%d\fP  [default \fI64:40\fP] 
.RS 3
Vertical deblocking filter
.RE
\(bu 
.I h1 
(bool) 
.RS 3
Experimental h deblock filter 1
.RE
\(bu 
.I v1 
(bool) 
.RS 3
Experimental v deblock filter 1
.RE
\(bu 
.I dr 
(bool) 
.RS 3
Deringing filter
.RE
\(bu 
.I al 
(bool) 
.RS 3
Automatic brightness / contrast
.RE
\(bu 
.I f 
(bool) 
.RS 3
Stretch luminance to (0..255)
.RE
\(bu 
.I lb 
(bool) 
.RS 3
Linear blend deinterlacer
.RE
\(bu 
.I li 
(bool) 
.RS 3
Linear interpolating deinterlace
.RE
\(bu 
.I ci 
(bool) 
.RS 3
Cubic interpolating deinterlacer
.RE
\(bu 
.I md 
(bool) 
.RS 3
Median deinterlacer
.RE
\(bu 
.I de 
(bool) 
.RS 3
Default preset (hb:a/vb:a/dr:a/al)
.RE
\(bu 
.I fa 
(bool) 
.RS 3
Fast preset (h1:a/v1:a/dr:a/al)
.RE
\(bu 
.I tn 
= \fI%d:%d:%d\fP  [default \fI64:128:256\fP] 
.RS 3
Temporal Noise Reducer (1<=2<=3)
.RE
\(bu 
.I fq 
= \fI%d\fP  [default \fI15\fP] 
.RS 3
Force quantizer
.RE
\(bu 
.I pre 
(bool) 
.RS 3
Run as a PRE filter
.RE
.RE
.TP 4
\fBpreview\fP - \fBxv/sdl/gtk preview plugin\fP
\fBpreview\fP was written by Thomas Oestreich. The version documented here is v0.1.4 (2002-10-08). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
.IP
XXX: Write me
.RE
.TP 4
\fBpv\fP - \fBxv only preview plugin\fP
\fBpv\fP was written by Thomas Oestreich, Tilmann Bitterberg. The version documented here is v0.2.2 (2003-02-27). This is a video filter. It can handle YUV mode only. It is a post-processing only filter.
.IP
.RS
\(bu 
.I cache 
= \fI%d\fP  [default \fI15\fP] 
.RS 3
Number of raw frames to cache for seeking
.RE
\(bu 
.I skip 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
display only every Nth frame
.RE
.IP
XXX: write me
.RE
.TP 4
\fBresample\fP - \fBaudio resampling filter plugin\fP
\fBresample\fP was written by Thomas Oestreich. The version documented here is v0.1.4 (2003-08-22). This is a audio filter. It is a pre-processing only filter.
.TP 4
\fBskip\fP - \fBskip all listed frames\fP
\fBskip\fP was written by Thomas Oestreich. The version documented here is v0.0.1 (2001-11-27). This is a video and audio filter. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I fstart1-fend1 [ fstart2-fend2 [ .. ] ] 
= \fI%s\fP
.RS 3
apply filter [start-end] frames
.RE
.RE
.TP 4
\fBslowmo\fP - \fBslow-motion effect\fP
\fBslowmo\fP was written by Tilmann Bitterberg. The version documented here is v0.2 (2003-06-23). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
.IP
This filter produces a simple slow-motion effect by
duplicating certain frames. I have seen this effect
on TV and despite its the simple algorithm it works
quite well. The filter has no options.
.RE
.TP 4
\fBsmartbob\fP - \fBMotion-adaptive deinterlacing for double-frame-rate output.\fP
\fBsmartbob\fP was written by Donald Graft, Tilmann Bitterberg. The version documented here is v1.1beta2 (2003-06-23). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I motionOnly 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Show motion areas only
.RE
\(bu 
.I shiftEven 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Blend instead of interpolate in motion areas
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI12\fP] 
.RS 3
Motion Threshold
.RE
\(bu 
.I denoise 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Phase shift
.RE
.IP
This filter only makes sence when fed by -J doublefps.
It will take the field-frames which filter_doublefps
produces and generates full-sized motion adaptive deinterlaced 
output at the double import framerate.
If you force reading the imput file twice its actual frames 
per second, A/V will stay in sync (for PAL):
-f 50 -J doublefps=shiftEven=1,smartbob=denoise=1:threshold=12
.RE
.TP 4
\fBsmartdeinter\fP - \fBVirtualDub's smart deinterlacer\fP
\fBsmartdeinter\fP was written by Donald Graft. The version documented here is v2.7b (2003-02-01). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I motionOnly 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Show motion areas only
.RE
\(bu 
.I Blend 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Blend instead of interpolate in motion areas
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI15\fP] 
.RS 3
Motion Threshold
.RE
\(bu 
.I scenethreshold 
= \fI%d\fP  [default \fI100\fP] 
.RS 3
Scene Change Threshold
.RE
\(bu 
.I fieldShift 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Phase shift
.RE
\(bu 
.I inswap 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Field swap before phase shift
.RE
\(bu 
.I outswap 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Field swap after phase shift
.RE
\(bu 
.I noMotion 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Disable motion processing
.RE
\(bu 
.I highq 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Motion map denoising for field-only
.RE
\(bu 
.I diffmode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Motion Detection (0=frame, 1=field, 2=both)
.RE
\(bu 
.I colordiff 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Compare color channels instead of luma
.RE
\(bu 
.I cubic 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Use cubic for interpolation
.RE
.IP
This filter provides a smart, motion-based deinterlacing
capability. In static picture areas, interlacing artifacts do not
appear, so data from both fields is used to provide full detail. In
moving areas, deinterlacing is performed
.RE
.TP 4
\fBsmartyuv\fP - \fBMotion-adaptive deinterlacing\fP
\fBsmartyuv\fP was written by Tilmann Bitterberg. The version documented here is 0.1.4 (2003-10-13). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I motionOnly 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Show motion areas only, blacking out static areas
.RE
\(bu 
.I diffmode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Motion Detection (0=frame, 1=field, 2=both)
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI14\fP] 
.RS 3
Motion Threshold (luma)
.RE
\(bu 
.I chromathres 
= \fI%d\fP  [default \fI7\fP] 
.RS 3
Motion Threshold (chroma)
.RE
\(bu 
.I scenethres 
= \fI%d\fP  [default \fI31\fP] 
.RS 3
Threshold for detecting scenechanges
.RE
\(bu 
.I highq 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
High-Quality processing (motion Map denoising)
.RE
\(bu 
.I cubic 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Do cubic interpolation
.RE
\(bu 
.I Blend 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Blend the frames for deinterlacing
.RE
\(bu 
.I doChroma 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Enable chroma processing (slower but more accurate)
.RE
\(bu 
.I verbose 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Verbose mode
.RE
.IP
This filter is basically a rewrite of the
smartdeinter filter by Donald Graft (without advanced processing
options) for YUV mode only. Its faster than using the smartdeinter
in YUV mode and is also tuned with its threshold settings for YUV
mode. The filter detects motion and static areas in an image and
only deinterlaces (either by blending or by cubic interpolation)
the moving areas. The result is an image with high detail in
static areas, no information is lost there.

The threshold settings should be sufficent for most users. As a
rule of thumb, I recommend setting the chroma threshold to about
the half of the luma threshold. If you want more deinterlacing,
lower the thresholds. The scene threshold can be easily found by
turning on verbose mode and the preview filter. In verbose mode,
the filter will print out, when it detects a scene change. If
scenechanges go by unnoticed, lower the scene threshold. You can
completly disable chroma processing with the doChroma=0 option.
Here is a sample commandline

-J smartyuv=highq=1:diffmode=2:cubic=1:Blend=1:chromathres=4:threshold=8:doChroma=1
.RE
.TP 4
\fBsmooth\fP - \fB(single-frame) smoothing plugin\fP
\fBsmooth\fP was written by Chad Page. The version documented here is v0.2.3 (2003-03-27). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter. It supports multiple instances.
.IP
.RS
\(bu 
.I strength 
= \fI%f\fP  [default \fI0.25\fP] 
.RS 3
Blending factor
.RE
\(bu 
.I cdiff 
= \fI%d\fP  [default \fI6\fP] 
.RS 3
Max difference in chroma values
.RE
\(bu 
.I ldiff 
= \fI%d\fP  [default \fI8\fP] 
.RS 3
Max difference in luma value
.RE
\(bu 
.I range 
= \fI%d\fP  [default \fI4\fP] 
.RS 3
Search Range
.RE
.IP
"single-frame" means it only works with the current frame, it does not need the
next or the previous frame for operation. Usually smoothing is done by talking
the data of previous frames into account to see which parts of the picture can
be "safely" smoothed, this filter only needs one frame.
.RE
.TP 4
\fBsubtitler\fP - \fBsubtitle filter\fP
\fBsubtitler\fP was written by Panteltje. The version documented here is v0.4 (2002-02-19). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
.IP
Usage -J subtitler="[no_objects] [subtitle_file=s]
[color_depth=n]
[font_dir=s] [font=n] [font_factor=f
[frame_offset=n]
[debug] [help]"
f is float, h is hex, n is integer, s is string.

no_objects           disables subtitles and other objects (off).
.br
color_depth=         32 or 24 (overrides X auto) (32).
.br
font=                0 or 1, 1 gives strange symbols... (0).
.br
font_dir=            place where font.desc is (~/.subtitles/font).
.br
font_factor=         .1 to 100 outline characters (10.75).
.br
frame_offset=        positive (text later) or negative (earlier) integer (0).
.br
subtitle_file=       pathfilename.ppml location of ppml file (~/.subtitles/demo.ppml).
.br
debug                prints debug messages (off).
.br
help                 prints this list and exit.
.RE
.TP 4
\fBtc_video\fP - \fBvideo 23.9 -> 29.9 telecide filter\fP
\fBtc_video\fP was written by Tilmann Bitterberg. The version documented here is v0.2 (2003-06-10). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.RE
.TP 4
\fBtestframe\fP - \fBgenerate stream of testframes\fP
\fBtestframe\fP was written by Thomas Oestreich. The version documented here is v0.1.3 (2003-09-04). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I mode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Choose the test pattern (0-4 interlaced, 5 colorfull)
.RE
.RE
.TP 4
\fBtext\fP - \fBwrite text in the image\fP
\fBtext\fP was written by Tilmann Bitterberg. The version documented here is v0.1.2 (2003-06-27). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I range 
= \fI%u-%u/%d\fP  [default \fI0-4294967295/1\fP] 
.RS 3
apply filter to [start-end]/step frames
.RE
\(bu 
.I string 
= \fI%s\fP
.RS 3
text to display (no ':') [defaults to `date`]
.RE
\(bu 
.I font 
= \fI%s\fP
.RS 3
full path to font file [defaults to arial.ttf]
.RE
\(bu 
.I points 
= \fI%d\fP  [default \fI25\fP] 
.RS 3
size of font (in points)
.RE
\(bu 
.I dpi 
= \fI%d\fP  [default \fI96\fP] 
.RS 3
resolution of font (in dpi)
.RE
\(bu 
.I fade 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
fade in/out (0=off, 1=slow, 10=fast)
.RE
\(bu 
.I antialias 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Anti-Alias text (0=off 1=on)
.RE
\(bu 
.I pos 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Position (0-width x 0-height)
.RE
\(bu 
.I posdef 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Position (0=None 1=TopL 2=TopR 3=BotL 4=BotR 5=Cent 6=BotCent)
.RE
\(bu 
.I notransparent 
(bool) 
.RS 3
disable transparency (enables block box)
.RE
.IP
see /docs/filter_text.txt
.RE
.TP 4
\fBunsharp\fP - \fBunsharp mask & gaussian blur\fP
\fBunsharp\fP was written by Rémi Guyomarch. The version documented here is v1.0.1 (2003-10-27). This is a video filter. It can handle YUV mode only. It is a post-processing only filter.
.IP
.RS
\(bu 
.I amount
= \fI%f\fP  [default \fI0.0\fP] 
.RS 3
Luma and chroma (un)sharpness amount
.RE
\(bu 
.I matrix 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Luma and chroma search matrix size
.RE
\(bu 
.I luma 
= \fI%f\fP  [default \fI0.0\fP] 
.RS 3
Luma (un)sharpness amount
.RE
\(bu 
.I chroma 
= \fI%f\fP  [default \fI0.0\fP] 
.RS 3
Chroma (un)sharpness amount
.RE
\(bu 
.I luma_matrix 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Luma search matrix size
.RE
\(bu 
.I chroma_matrix 
= \fI%dx%d\fP  [default \fI0x0\fP] 
.RS 3
Chroma search matrix size
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
run as a pre filter
.RE
.IP
This filter blurs or sharpens an image depending on
the sign of "amount". You can either set amount for
both luma and chroma or you can set it individually
(recommended). A positive value for amount will sharpen
the image, a negative value will blur it. A sane range
for amount is -1.5 to 1.5.

The matrix sizes must be odd and define the
range/strength of the effect. Sensible ranges are 3x3
to 7x7.

It sometimes makes sense to sharpen the sharpen the
luma and to blur the chroma. Sample string is:

luma=0.8:luma_matrix=7x5:chroma=-0.2:chroma_matrix=3x3
.RE
.TP 4
\fBvideocore\fP - \fBCore video transformations\fP
\fBvideocore\fP was written by Thomas, Tilmann. The version documented here is v0.0.4 (2003-02-01). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I deinterlace 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
same as -I
.RE
\(bu 
.I flip 
(bool) 
.RS 3
same as -z
.RE
\(bu 
.I mirror 
(bool) 
.RS 3
same as -l
.RE
\(bu 
.I rgbswap 
(bool) 
.RS 3
same as -k
.RE
\(bu 
.I decolor 
(bool) 
.RS 3
same as -K
.RE
\(bu 
.I dgamma 
= \fI%f\fP  [default \fI0.000000\fP] 
.RS 3
same as -G
.RE
\(bu 
.I antialias 
= \fI%d/%f/%f\fP  [default \fI0/0.33/0.50\fP] 
.RS 3
same as -C/weight/bias
.RE
.RE
.TP 4
\fBwhitebalance\fP - \fBWhite Balance Filter - correct images with a broken white balance\fP
\fBwhitebalance\fP was written by Guillaume Cottenceau. The version documented here is v0.1 (2003-10-01). This is a video filter. It can handle RGB and YUV mode. It is a pre-processing only filter.
.IP
.RS
\(bu 
.I level 
= \fI%d\fP  [default \fI40\fP] 
.RS 3
Strength of filter (may also be negative for opposite effect)
.RE
\(bu 
.I limit
= \fI%s\fP  [default disabled] 
.RS 3
A string containing a series of frame numbers prepended by '-' to switch off or '+' to switch on (for example, -50+80-120 will disable from frame number 50 to number 80, then disable from 120 to the end)
.RE
.IP
This filter allows correcting movies with a broken white balance (e.g.
bluish movie, for example).
.RE
.TP 4
\fBxharpen\fP - \fBVirtualDub's XSharpen Filter\fP
\fBxharpen\fP was written by Donald Graft, Tilmann Bitterberg. The version documented here is (1.0b2) (2003-02-12). This is a video filter. It can handle RGB and YUV mode. It is a post-processing only filter.
.IP
.RS
\(bu 
.I strength 
= \fI%d\fP  [default \fI200\fP] 
.RS 3
How much  of the effect
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI255\fP] 
.RS 3
How close a pixel must be to the brightest or dimmest pixel to be mapped
.RE
.IP
This filter performs a subtle but useful sharpening effect. The
result is a sharpening effect that not only avoids amplifying
noise, but also tends to reduce it. A welcome side effect is that
files processed with this filter tend to compress to smaller files.

  Strength 'strength' (0-255) [200]
    When this value is 255, mapped pixels are not blended with the original pixel values, so a full-strength effect is obtained. As the value is reduced, each mapped pixel is blended with more of the original pixel. At a value of 0, the original pixels are passed through and there is no sharpening effect.

  Threshold 'threshold' (0-255) [255]
    This value determines how close a pixel must be to the brightest or dimmest pixel to be mapped. If a pixel is more than threshold away from the brightest or dimmest pixel, it is not mapped.  Thus, as the threshold is reduced, pixels in the mid range start to be spared.
.RE
.TP 4
\fByuvdenoise\fP - \fBmjpegs YUV denoiser\fP
\fByuvdenoise\fP was written by Stefan Fendt, Tilmann Bitterberg. The version documented here is v0.2.1 (2003-11-26). This is a video filter. It can handle YUV mode only. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I radius 
= \fI%d\fP  [default \fI8\fP] 
.RS 3
Search radius
.RE
\(bu 
.I threshold 
= \fI%d\fP  [default \fI5\fP] 
.RS 3
Denoiser threshold
.RE
\(bu 
.I pp_threshold 
= \fI%d\fP  [default \fI4\fP] 
.RS 3
Pass II threshold
.RE
\(bu 
.I delay 
= \fI%d\fP  [default \fI3\fP] 
.RS 3
Average 'n' frames for a time-lowpassed pixel
.RE
\(bu 
.I postprocess 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Filter internal postprocessing
.RE
\(bu 
.I luma_contrast 
= \fI%d\fP  [default \fI100\fP] 
.RS 3
Luminance contrast in percent
.RE
\(bu 
.I chroma_contrast 
= \fI%d\fP  [default \fI100\fP] 
.RS 3
Chrominance contrast in percent.
.RE
\(bu 
.I sharpen 
= \fI%d\fP  [default \fI125\fP] 
.RS 3
Sharpness in percent
.RE
\(bu 
.I deinterlace 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Force deinterlacing
.RE
\(bu 
.I mode 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
[0]: Progressive [1]: Interlaced [2]: Fast
.RE
\(bu 
.I scene_thres 
= \fI%d%%\fP  [default \fI50\fP] 
.RS 3
Blocks where motion estimation should fail before scenechange
.RE
\(bu 
.I block_thres 
= \fI%d\fP  [default \fI1024\fP] 
.RS 3
Every SAD value greater than this will be considered bad
.RE
\(bu 
.I do_reset 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Reset the filter for `n' frames after a scene
.RE
\(bu 
.I increment_cr 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Increment Cr with constant
.RE
\(bu 
.I increment_cb 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Increment Cb with constant
.RE
\(bu 
.I border 
= \fI%dx%d-%dx%d\fP  [default \fI0x0-32x32\fP] 
.RS 3
Active image area
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
run this filter as a pre-processing filter
.RE
.IP
see /docs/filter_yuvdenoise.txt
.RE
.TP 4
\fByuvmedian\fP - \fBmjpegs YUV median filter\fP
\fByuvmedian\fP was written by Mike Bernson, Tilmann Bitterberg. The version documented here is v0.1.0 (2003-01-24). This is a video filter. It can handle YUV mode only. It can be used as a pre-processing or as a post-processing filter.
.IP
.RS
\(bu 
.I radius_luma 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Radius for median (luma)
.RE
\(bu 
.I radius_chroma 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Radius for median (chroma)
.RE
\(bu 
.I threshold_luma 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Trigger threshold (luma)
.RE
\(bu 
.I threshold_chroma 
= \fI%d\fP  [default \fI2\fP] 
.RS 3
Trigger threshold (chroma)
.RE
\(bu 
.I interlace 
= \fI%d\fP  [default \fI0\fP] 
.RS 3
Treat input as interlaced
.RE
\(bu 
.I pre 
= \fI%d\fP  [default \fI1\fP] 
.RS 3
Run as a PRE filter
.RE
.RE
.TP 4
\fByuy2tov12\fP - \fBYUY2 to YV12 converter plugin\fP
\fByuy2tov12\fP was written by Thomas Oestreich. The version documented here is v0.0.2 (2003-09-04). This is a video filter. It can handle YUV mode only. It is a pre-processing only filter.
.PP
.SH NOTES
.TP
*
Most source material parameter are auto-detected.
.TP
*
Clipping region options are expanded symmetrically.  Examples:
.RS
.LP
-j 80 will be expanded to -j 80,0,80,0
.LP
-j 80,8 will be expanded to -j 80,8,80,8
.LP
-j 80,8,10 will be expanded to -j 80,8,10,8
.RE
.TP
*
maximum image size is 1920x1088. 
.TP
*
The video frame operations ordering is fixed: "-j -I -X -B -Z -Y -r -z
-l -k -K -G -C" (executed from left to right).
.TP
*
Shrinking the image with '-B' is not possible if the image
width/height is not a multiple of 8, 16 or 32.
.TP
*
Expanding the image with '-X' is not possible if the image
width/height is not a multiple of 8, 16 or 32.
.TP
*
The final frame width/height should be a multiple of 8. (to avoid
encoding problems with some codecs)  
.RS
.IP 1.
Reducing the video height/width by 2,4,8 Option '-r factor' can be
used to shrink the video image by a constant factor, this factor can
be 2,4 or 8.
.IP 2.
Clipping and changing the aspect ratio
.I transcode 
uses 3 steps to produce the input image for the export modules 
.RS
.IP 1.
Clipping of the input image. 
.IP 2.
Changing the aspect ratio of the 1) output. 
.IP 3.
Clipping of the 2) output. 
.RE
.RE
.TP
*
.I Bits per pixel
(bits/pixel) is a value transcode calculates and prints when starting up. It is
mainly useful when encoding to MPEG4 (xvid, divx, etc). You'll see line like 
.RS

[transcode] V: bits/pixel       | 0.237

Simplified said, bits/pixel quantifies how good an encode will be. Although
this value depends heavily on the used input material, as a general rule of
thump it can be said that values greater or close to 0.2 will result in good
encodes, encodes with values less than 0.15 will have noticeable artifacts.

.I Bits per pixel 
depends on the resolution, bitrate and frames per second. If you have a low
value ( < 0.15), you might want to raise the bitrate or encode at a lower
resolution. The exact formula is

           bitrate*1000
  bpp =  ----------------
         width*height*fps

.RE
.TP
*
.I AC3 / Multiple channels

When you do import an audio stream which has more then two audio channels \-
this is usually the case for AC3 audio \- transcode will automagically downmix
to two channels (stereo). You'll see line like
.RS

[transcode] A: downmix          | 5 channels -> 2 channels

This is done, because most encoders and audio filters can not handle more than
2 channels correctly. The PCM internal representation does not support more
than two channels, audio will be downmixed to stereo
.B No
downmix will happen, if you use AC3 as the internal audio codec or use audio
pass-through.
.RE

.SH EXAMPLES
The following command will read it's input from the DVD drive (I
assume \fI/dev/dvd\fP is a symbolic link to the actual DVD device) and
produce a splitted divx4 movie according to the chapter information on
the DVD medium.  The output files will be named
\fImy_movie-ch00.avi\fP, \fImy_movie-ch01.avi\fP ...
.LP
.PD 0
\fBtranscode -i /dev/dvd/ -x dvd -V -j 16,0 -B 5,0 \\\fP
.RS
.TP
.B -Y 40,8 -s 4.47 -U my_movie -y xvid -w 1618
.RE
.PD 1
.LP
Option 
.B -V
tells \fItranscode\fP to use YUV as internal video
colorspace, which saves a lot of CPU/PCI bandwidth.
.LP
Option
.B -j 16,0
will be expanded to
.B -j 16,0,16,0
and results in 16 rows from the top and the bottom of the image to be
cut off.  This may be usefull if the source consists of black top and
bottom bars.
.LP
Option
.B -B 5,0
tells \fItranscode\fP to shrink the resulting image by 5*32=160 rows
in height.
.LP
Option
.B -Y 40,8
will be expanded to
.B -Y 40,8,40,8
and tells \fItranscode\fP to ...
.LP
Option
.B -s 4.47
tells \fItranscode\fP to increase audio volume by a factor 4.47.
.LP
Option
.B -U my_movie
tells \fItranscode\fP to operate in chapter mode and produce output
to files named \fImy_movie-ch00.avi\fP, \fImy_movie-ch01.avi\fP...
.br
You can either merge the files afterwards with avimerge or add the option
--no_split to the command line.
.LP
Option
.B -y xvid
tells \fItranscode\fP to use the export module export_xvid.so which in turn uses the XviD encoder to encode the video.
.LP
Option
.B -w 1618
tells \fItranscode\fP to set the encoder bitrate to 1618 which is
lower than the default of 1800 and results in smaller files with the
loss of visual quality.
.SH AUTHORS
.I transcode
was written by Thomas Östreich
.br
<ostreich@theorie.physik.uni-goettingen.de> with contributions from
many others.  See \fIAUTHORS\fP for details.
.SH SEE ALSO
.BR avifix (1),
.BR avisync (1),
.BR avimerge (1),
.BR avisplit (1),
.BR tcprobe (1),
.BR tcscan (1),
.BR tccat (1),
.BR tcdemux (1),
.BR tcextract (1),
.BR tcdecode (1),
.BR tcmodinfo (1),
.BR tcxmlcheck (1),
.BR transcode (1)
.br
.SH WWW
Frequently asked questions (FAQ) at
.br
.UR
http://www.theorie.physik.uni-goettingen.de/~ostreich/transcode/html/faq.html
.UE
.br
Example transcode sessions
.br
.UR
http://www.theorie.physik.uni-goettingen.de/~ostreich/transcode/html/index.html
.UE
.SH BUGS
see 
.UR
http://www.theorie.physik.uni-goettingen.de/~ostreich/transcode/pending.html
.UE
