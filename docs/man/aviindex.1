.TH aviindex 1 "25th June 2003" "aviindex(1)"
.SH NAME
aviindex \- Write a text file describing the index of an AVI file
.SH SYNOPSIS
.na
.B aviindex
[
.B -o
.I ofile
.B -i
.I ifile
.B -n
.B -v
.B -h
]
.SH COPYRIGHT
\fBaviindex\fP is Copyright (C) by Tilmann Bitterberg
.SH DESCRIPTION
.B aviindex
writes a text file describing the index of an AVI file.
.br
An AVI file can have an optional chunk called "idx1" which contains
information about keyframes (syncpoints) and locations of video
frames resp. audio chunks. Movie players use this index to seek in
files.
.P
\fBaviindex\fP reads the AVI file \fIifile\fP and writes the index
into \fIofile\fP. This can either happen in "dump" mode where
\fBaviindex\fP looks for an existing index (and trusts this index!)
in the file and dumps this index into a human readable form. The
"dump" mode is used, when \fI-n\fP is NOT specified or when the
filesize of the input file is smaller than 2 GB.
.P
In "smart" mode, \fBaviindex\fP scans through the complete AVI file
and searches for chunks (may that video or audio) and reconstructs
the index based on the information found. If an index chunk is found
accidently, \fBaviindex\fP will use the information in this index to
recover the keyframe information, which is important. \fBaviindex\fP
will use smart mode, if given the \fI-n\fP option OR if the AVI file
is larger than 2 GB. If the file is large, the index chunk cannot be
found the usual way so one must use \fI-n\fP but it is possible that
there is an index chunk in this file. Cross fingers.
.P
The generated index file serves different purposes. 
.RS

* The library which handles AVI files in transcode(1) can read such
index files and use this file to rebuild the index instead of
scanning through the whole AVI file over and over again. Reading the
index from the index file is *much* faster than scanning through the
AVI.

* It can be used as a seeking file. When given to transcode via the
--nav_seek switch, transcode will use the file to seek directly to
the position you specified via -c. This also works for multiple -c
ranges.

* Its nice to have for debugging.
.RE
.SH OPTIONS
.TP
\fB-o\fP \fIofile\fP
Specify the name of the output file.
.TP
\fB-i\fP \fIifile\fP
Specify the name of the input file.
.TP
\fB-n\fP
force generating the index.
.TP
\fB-v\fP
show version.
.TP
\fB-h\fP
show help text.
.SH EXAMPLES
The command
.PP
.B aviindex -i 3GBfile.avi -o 3GB.index 
.PP
generates and index of the large file 3GBfile.avi. You can use the
file 3GB.index to tell transcode to read the index from this file
and not from the avi. This leads to much faster startup time.
.PP
Suppose 3GBfile.avi has DivX video and PCM sound and you want to
encode several ranges.
.PP
transcode -V -i 3GBfile.avi --nav_seek 3GB.index -x xvid,avi \\
.br
-c 5000-6000,0:20:00-0:21:00,100000-100001 \\
.br
-y xvid --lame_preset standard -o out.avi
.SH FORMAT
The format of the index file. The first 7 bytes in this file are
"AVIIDX1" for easy detection and a comment of who created the file.
The second line is a comment and describes the fields. Do not delete
it. Each line (except the first 2) consists of exactly 8 fields all
seperated by one space and describing one particular chunk of the AVI
file.
.br
Here is an example of an AVI file with two audio tracks.
.RS

AVIIDX1 # Generated by aviindex (transcode-0.6.8)
.br
TAG TYPE CHUNK CHUNK/TYPE POS LEN KEY MS
.br
00db 1 0 0 2048 8335 1 0.00
.br
01wb 2 1 0 10392 847 1 0.00
.br
01wb 2 2 1 11248 847 1 0.00
.br
02wb 3 3 0 12104 847 1 0.00
.br
02wb 3 4 1 12960 847 1 0.00
.br
00db 1 5 1 13816 5263 0 0.00
.br
00db 1 6 2 19088 3435 0 0.00
.br
01wb 2 7 2 22532 834 1 0.00

.RE
The field \fITAG\fP is the chunk descriptor. Its "00d*" for the video,
"01wb" for the first audio track, "02wb" for the second audio track
and so on.
.P
The field \fITYPE\fP is the type of the chunk. This is redundant because
the type is also embedded into the TAG field but its a convenient
thing to have. Its 1 for video, 2 for first audio track and 3
for second audio track.
.P
The field \fICHUNK\fP is the absolute chunk number in the AVI file. If you
read the CHUNK field in the last line of the index file, you know
how many chunks this AVI file has.
.P
The field \fICHUNK/TYPE\fP holds information about how many chunks
of this type were previously found in the AVI file.
.P
The field \fIPOS\fP is the absolute byte position in the AVI file
where this chunk can be found. Note this field can hold really large
numbers if you are dealing with large AVIs.
.P
The field \fILEN\fP is the length of this chunk.
.P
The field \fIKEY\fP holds information if this chunk is a keyframe.
In the example above, all audio chunks are key-chunks, but only the
first video frame is a key frame. This field is either 0 or 1.
.P
The field \fIMS\fP holds information about how many milliseconds
have passed. This field may be 0.00 if unknown.
.SH AUTHORS
.B aviindex
was written by Tilmann Bitterberg <transcode at tibit.org>
.br
and is part of transcode.
.SH SEE ALSO
.BR avifix (1),
.BR avisync (1),
.BR avimerge (1),
.BR avisplit (1),
.BR tccat (1),
.BR tcdecode (1),
.BR tcdemux (1),
.BR tcextract (1),
.BR tcprobe (1),
.BR tcscan (1),
.BR transcode (1)
